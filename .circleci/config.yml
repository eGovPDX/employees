# CircleCI integration with Drupal 8.

#Jobs

## Job to build and deploy to Pantheon
build_and_deploy: &build_and_deploy
  docker:
    - image: cimg/php:8.1-node
      user: root
      auth:
        username: egovpdx
        password: $DOCKERHUB_PASSWORD
  working_directory: /var/www/html
  steps:
    - restore_cache:
        name: Retore Git cache before checkout
        keys:
          - source-v1-{{ .Branch }}-{{ .Revision }}
          - source-v1-{{ .Branch }}-
          - source-v1-
    - checkout
    - run: git gc
    - save_cache:
        name: Save Git cache after checkout
        key: source-v1-{{ .Branch }}-{{ .Revision }}
        paths:
          - ".git"
    - run:
        name: Install Terminus
        command: |
          if [ ! -f "/tmp/vendor/pantheon-systems/terminus/bin/terminus" ]; then
            cd /tmp && composer require pantheon-systems/terminus:^3
            # Temporary workaround to https://github.com/pantheon-systems/terminus/issues/2336
            cd /tmp && composer require league/container:3.4.1
            /tmp/vendor/bin/terminus self:plugin:install terminus-build-tools-plugin
          fi
    - restore_cache:
        name: Restore theme dependencies cache
        keys:
          - westy_-{{ checksum "web/themes/custom/westy/package.json" }}
    - run:
        name: Install theme dependencies
        command: |
          cd web/themes/custom/westy && npm install
    - save_cache:
        name: Save theme dependencies cache
        key: westy_-{{ checksum "web/themes/custom/westy/package.json" }}
        paths:
          - "web/themes/custom/westy/node_modules"
    - restore_cache:
        name: Restore Composer Cache
        keys:
          - v2-dependencies-{{ checksum "composer.lock" }}
          # fallback to using the latest cache if no exact match is found
          - v2-dependencies-
    - run:
        name: Composer install
        command: |
          # TODO: [POWR-3429] I'm not sure we need this hotfix on employees - getting error on module but can't update due to lightning dependency, try removing and getting fresh
          rm -rf ./web/modules/contrib/search_api_solr
          # Pantheon does not allow these folders but Composer needs them
          rm -rf ./web/modules/contrib/facets
          # Run composer install
          composer -V
          composer config --global --auth github-oauth.github.com "$COMPOSER_TOKEN"
          composer install --no-interaction --no-dev
    - save_cache:
        name: Save Composer Cache
        key: v2-dependencies-{{ checksum "composer.lock" }}
        paths:
          - ./vendor
          - ./web/core
          - ./web/modules/contrib
          - ./web/profiles/contrib
          - ./web/themes/contrib
          - ./web/libraries
    - run:
        name: Build theme
        command: |
          cd web/themes/custom/westy && npm run production
    - run:
        name: Deploy to Pantheon
        when: on_success
        no_output_timeout: 15m # allow 15 minutes instead of 10 minute default for script to complete
        command: |
          # Add ssh-rsa to the accepted algorithms
          # https://pantheon.io/docs/ssh-keys#connections-fail-with-no-matching-host-key-type-found-their-offer-ssh-rsa
          echo "Host *.drush.in" > ~/.ssh/config
          echo "    HostkeyAlgorithms +ssh-rsa" >> ~/.ssh/config
          echo "    PubkeyAcceptedAlgorithms +ssh-rsa" >> ~/.ssh/config

          # Add terminus into path
          export PATH=/tmp/vendor/bin:/var/www/html/vendor/bin:$PATH && cd /var/www/html

          # Don't check the repo host key
          export GIT_SSH_COMMAND="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"

          # Don't check for host key for Pantheon sites
          echo -e "host *.drush.in\n    StrictHostKeyChecking no" >> ~/.ssh/config

          # Terminus log in with the user email that will be displayed as the commit user in Pantheon Git repo
          terminus auth:login --machine-token="$eGov_Terminus" --email="$eGov_Email"

          # Git operations
          # Set the git commit user name and email address so it's clear in Pantheon log who made the change
          git config --global user.name $CIRCLE_USERNAME
          git config --global user.email $eGov_Email
          git config --global core.safecrlf false
          git remote add pantheon ssh://codeserver.dev.7f99fc39-aa02-4ea5-a753-9ea5e2b38435@codeserver.dev.7f99fc39-aa02-4ea5-a753-9ea5e2b38435.drush.in:2222/~/repository.git

          # Force add all files to include those excluded by .gitignore
          cd /var/www/html
          find ./web/modules -name .git -type d -prune -exec rm -rf "{}" \;
          find ./web/themes -name .git -type d -prune -exec rm -rf "{}" \;
          rm -r ./web/themes/custom/westy/node_modules/
          git add -f /var/www/html

          # Pantheon site will use the wrong DB if the local is kept
          git rm --cache  web/sites/default/settings.local.php --ignore-unmatch
          git rm -r --cache web/sites/default/files --ignore-unmatch

          # Commit to Pantheon
          export COMMIT_MSG="$(git log -1 --pretty=%B)"
          git commit -m "CircleCI deployment for: " -m "$COMMIT_MSG" --quiet

          # When commit on master, we deploy to DEV
          if [[ $CIRCLE_BRANCH = "master" ]]; then
            echo "Deploy to Pantheon DEV site"
            # Set Pantheon environment name
            echo "export PANTHEON_ENV=dev" >> $BASH_ENV && source $BASH_ENV
          else
            echo "export PANTHEON_ENV=$CIRCLE_BRANCH" >> $BASH_ENV && source $BASH_ENV

            # Check if the multidev branch site exists. If not, create it
            terminus multidev:list --format=list --field=Name $CIRCLE_PROJECT_REPONAME > ./env_list.txt
            if grep -Fxq "$PANTHEON_ENV" ./env_list.txt; then
              echo "Found multidev site"
            else
              # Determine base branch of PR
              #   - Extract PR number from pull request URL
              #   - Query GitHub API for PR data and extract base branch from JSON base.ref property
              [[ $CIRCLE_PULL_REQUEST =~ \/pull\/([0-9]+)$ ]]
              BASE=$(curl -s https://api.github.com/repos/egovPDX/$CIRCLE_PROJECT_REPONAME/pulls/${BASH_REMATCH[1]} | grep -Pzo '(?s)"base":.*?"ref": "\K[A-Za-z0-9_-]+' | tr -d '\0')
              if [[ $BASE = "master" ]]; then
                BASE=dev
              fi
              # Create a new multidev with files and database from site corresponding to PR's base branch.
              echo "Creating new multidev site cloned from $BASE. Please wait."
              terminus multidev:create $CIRCLE_PROJECT_REPONAME.$BASE $PANTHEON_ENV >/dev/null
            fi
          fi

          # Set the connection type to GIT
          terminus connection:set $CIRCLE_PROJECT_REPONAME.$PANTHEON_ENV git

          # Force push $CIRCLE_BRANCH to Pantheon
          git push -f pantheon $CIRCLE_BRANCH:$CIRCLE_BRANCH

          echo "Waiting for the workflow: Sync code on $PANTHEON_ENV..."
          terminus build:workflow:wait $CIRCLE_PROJECT_REPONAME.$PANTHEON_ENV "Sync code on $PANTHEON_ENV"

          # Run the equivalent of a drush deploy

          echo "Rebuilding cache..."
          terminus drush $CIRCLE_PROJECT_REPONAME.$PANTHEON_ENV -- cr
          echo "Running database updates..."
          terminus drush $CIRCLE_PROJECT_REPONAME.$PANTHEON_ENV -- updb -y
          echo "Importing config..."
          terminus drush $CIRCLE_PROJECT_REPONAME.$PANTHEON_ENV -- cim -y -vvv
          echo "Rebuilding cache..."
          terminus drush $CIRCLE_PROJECT_REPONAME.$PANTHEON_ENV -- cr

          if [[ $CIRCLE_BRANCH != "master" ]]; then
            # Begin indexing the Solr server. For new multidevs, indexing will take some time
            # and will continue running after the CircleCI build finishes.
            if grep -Fxq "$PANTHEON_ENV" ./env_list.txt; then
              echo "Multidev already exists, no need to reset index tracker"
            else
              echo "Reseting index tracker because index is empty on new multidev"
              terminus drush $CIRCLE_PROJECT_REPONAME.$PANTHEON_ENV -- search-api:reset-tracker
            fi
            echo "Begin indexing the Solr server"
            terminus drush $CIRCLE_PROJECT_REPONAME.$PANTHEON_ENV -- search-api:index full_index &
            sleep 20
            rm -rf ./env_list.txt
          fi

          # When commit on a permanent branch or master, delete the multi-dev site with name like "powr-1234a"
          if [[ $PANTHEON_ENV = "dev" ]]; then
            # After success deployment to dev, remove the multidev site if this is a merge of a PR.
            cd /var/www/html

            # Must read the last commit message from Github. The last one in local repo is "CircleCI Deployment"
            last_log=$(git log origin/$CIRCLE_BRANCH --pretty=format:%s -1)
            lowercase_last_log="${last_log,,}"
            JIRA_STORY_ID=""
            # Simple merge
            # Example: Merge pull request #35 from eGovPDX/powr-152
            if [[ $lowercase_last_log =~ (^merge pull request #[0-9]* from egovpdx\/)([^,]*) ]]; then
              echo "Found story ID from merge commit message: '${BASH_REMATCH[2]}'";
              JIRA_STORY_ID=${BASH_REMATCH[2]}
            # Squash and Merge on other feature branches
            # Example: POWR-3058 Delete all related multi-devs when a branch is merged
            elif [[ $lowercase_last_log =~ ^(([[:alpha:]]+)-[0-9]+) ]]; then
              echo "Found story ID from squash and merge commit message: '${BASH_REMATCH[1]}'";
              JIRA_STORY_ID=${BASH_REMATCH[1]}
            else
              echo "Cannot find JIRA story ID from the last commit message: $lowercase_last_log"
              exit 0
            fi

            # Save all multi-dev names in a file
            terminus multidev:list --format=list --field=Name $CIRCLE_PROJECT_REPONAME > ./env_list.txt
            echo "Multi-dev site list saved into env_list.txt"

            # Pattern to match "powr-1234a" or "powr-1234-1" or "powr-1234-a". Not "powr-12345"
            env_pattern="^${JIRA_STORY_ID}([a-z]*|(-\d+)|(-[a-z]+))$"

            # Find and delete all multidevs starting with the story ID
            if [ -f "./env_list.txt" ]
            then
              echo "Found multi-dev sites:";
              # cat ./env_list.txt
              grep -E "${env_pattern}" ./env_list.txt > ./matching_env_list.txt || true
              # cat ./matching_env_list.txt
              # If the file is NOT empty
              if [ -s "./matching_env_list.txt" ]
              then
                echo "Start to delete multi-dev..."
                while read env_name; do
                  terminus multidev:delete --delete-branch $CIRCLE_PROJECT_REPONAME.$env_name -y
                  echo "Deleted multi-dev: $env_name"
                done <./matching_env_list.txt
                echo "Done deleting multi-dev"
                rm -f ./matching_env_list.txt
              else
                echo "No multi-dev site found matching the story ID: $JIRA_STORY_ID."
              fi
            fi
          fi

visual_regression: &visual_regression
  docker:
    - image: cimg/php:8.1-browsers
      auth:
        username: egovpdx
        password: $DOCKERHUB_PASSWORD
  # run test in parallel
  # parallelism: 1
  working_directory: /home/circleci/app
  steps:
    - restore_cache:
        name: Retore Git cache before checkout
        keys:
          - jest-source-v1-{{ .Branch }}-{{ .Revision }}
          - jest-source-v1-{{ .Branch }}-
          - jest-source-v1-
    - checkout
    - run: git gc
    - save_cache:
        name: Save Git cache after checkout
        key: jest-source-v1-{{ .Branch }}-{{ .Revision }}
        paths:
          - ".git"
    - run:
        name: Install Terminus
        command: |
          if [ ! -f "/tmp/vendor/pantheon-systems/terminus/bin/terminus" ]; then
            cd /tmp && composer require pantheon-systems/terminus:^3
            # Temporary workaround to https://github.com/pantheon-systems/terminus/issues/2336
            cd /tmp && composer require league/container:3.4.1
          fi
    - restore_cache:
        name: Restore Jest and Percy dependencies cache
        keys:
          - jest-{{ checksum "tests/percy/yarn.lock" }}-v2
    - run:
        name: Install Jest and Percy dependencies
        command: |
          cd /home/circleci/app/tests/percy
          export PERCY_POSTINSTALL_BROWSER=true
          yarn install --frozen-lockfile
    - save_cache:
        name: Save Jest and Percy dependencies cache
        key: jest-{{ checksum "tests/percy/yarn.lock" }}-v2
        paths:
          - "tests/percy/node_modules"
    - run:
        name: Run Percy tests
        command: |
          # Add ssh-rsa to the accepted algorithms
          # https://pantheon.io/docs/ssh-keys#connections-fail-with-no-matching-host-key-type-found-their-offer-ssh-rsa
          echo "Host *.drush.in" > ~/.ssh/config
          echo "    HostkeyAlgorithms +ssh-rsa" >> ~/.ssh/config
          echo "    PubkeyAcceptedAlgorithms +ssh-rsa" >> ~/.ssh/config

          export PATH=/var/www/html/tests/vendor/bin:/tmp/vendor/pantheon-systems/terminus/bin:$PATH

          # Log in via terminus first. Required for tests that require user login.
          terminus auth:login --quiet --machine-token="$eGov_Terminus" --email="$eGov_Email" && terminus aliases

          # Prepare environment variables to be used by Percy
          if [[ $CIRCLE_BRANCH = "master" ]]; then
            echo 'export SITE_NAME="dev"' > $BASH_ENV && source $BASH_ENV
          else
            echo 'export SITE_NAME=${CIRCLE_BRANCH}' > $BASH_ENV && source $BASH_ENV
          fi

          mkdir /home/circleci/artifacts
          cd /home/circleci/app/tests/percy

          # Start Percy tests excluding full regression tests
          echo 'export SUPERADMIN_LOGIN=$(terminus drush ${CIRCLE_PROJECT_REPONAME}.${SITE_NAME} -- uli --name superAdmin)' > $BASH_ENV && source $BASH_ENV
          npm run single-test -- admin
    - store_artifacts:
        path: /home/circleci/artifacts
        destination: /

clone_live_database: &clone_live_database
  docker:
    - image: cimg/php:8.1-browsers
      auth:
        username: egovpdx
        password: $DOCKERHUB_PASSWORD
  working_directory: /home/circleci/app
  steps:
    - restore_cache:
        name: Retore Git cache before checkout
        keys:
          - jest-source-v1-{{ .Branch }}-{{ .Revision }}
          - jest-source-v1-{{ .Branch }}-
          - jest-source-v1-
    - checkout
    - run: git gc
    - save_cache:
        name: Save Git cache after checkout
        key: jest-source-v1-{{ .Branch }}-{{ .Revision }}
        paths:
          - ".git"
    - run:
        name: Install Terminus
        command: |
          if [ ! -f "/tmp/vendor/pantheon-systems/terminus/bin/terminus" ]; then
            cd /tmp && composer require pantheon-systems/terminus:^3
            # Temporary workaround to https://github.com/pantheon-systems/terminus/issues/2336
            cd /tmp && composer require league/container:3.4.1
            /tmp/vendor/bin/terminus self:plugin:install terminus-build-tools-plugin
          fi
    - restore_cache:
        name: Restore Jest and Percy dependencies cache
        keys:
          - jest-{{ checksum "tests/percy/yarn.lock" }}-v2
    - run:
        name: Install Jest and Percy dependencies
        command: |
          cd /home/circleci/app/tests/percy
          export PERCY_POSTINSTALL_BROWSER=true
          yarn install --frozen-lockfile
    - save_cache:
        name: Save Jest and Percy dependencies cache
        key: jest-{{ checksum "tests/percy/yarn.lock" }}-v2
        paths:
          - "tests/percy/node_modules"
    - run:
        name: Clone database from Live
        when: on_success
        no_output_timeout: 45m # allow 45 minutes instead of 10 minute default for script to complete
        command: |
          # Add ssh-rsa to the accepted algorithms
          # https://pantheon.io/docs/ssh-keys#connections-fail-with-no-matching-host-key-type-found-their-offer-ssh-rsa
          echo "Host *.drush.in" > ~/.ssh/config
          echo "    HostkeyAlgorithms +ssh-rsa" >> ~/.ssh/config
          echo "    PubkeyAcceptedAlgorithms +ssh-rsa" >> ~/.ssh/config
          # Add terminus into path
          export PATH=/tmp/vendor/bin:/home/circleci/app/vendor/bin:$PATH && cd /home/circleci/app
          # Don't check for host key for Pantheon sites
          echo -e "host *.drush.in\n    StrictHostKeyChecking no" >> ~/.ssh/config
          # Terminus log in with the user email that will be displayed as the commit user in Pantheon Git repo
          terminus auth:login --machine-token="$eGov_Terminus" --email="$eGov_Email"
          echo "export PANTHEON_ENV=$CIRCLE_BRANCH" >> $BASH_ENV && source $BASH_ENV
          
          echo "Cloning DB from Live to $PANTHEON_ENV..."
          terminus env:clone-content $CIRCLE_PROJECT_REPONAME.live $PANTHEON_ENV --db-only -y
          terminus drush $CIRCLE_PROJECT_REPONAME.$PANTHEON_ENV deploy
          # echo "Rebuilding cache..."
          # terminus drush $CIRCLE_PROJECT_REPONAME.$PANTHEON_ENV -- cr
          # echo "Running database updates..."
          # terminus drush $CIRCLE_PROJECT_REPONAME.$PANTHEON_ENV -- updb -y
          # echo "Importing config..."
          # terminus drush $CIRCLE_PROJECT_REPONAME.$PANTHEON_ENV -- cim -y -vvv
          # echo "Rebuilding cache..."
          # terminus drush $CIRCLE_PROJECT_REPONAME.$PANTHEON_ENV -- cr
          # Reindex the Solr server. Indexing will take some time
          # and will continue running after the CircleCI build finishes.
          echo "Begin indexing the Solr server"
          terminus drush $CIRCLE_PROJECT_REPONAME.$PANTHEON_ENV -- search-api:index full_index &
          sleep 20
    - run:
        name: Run Percy tests
        command: |
          # Add ssh-rsa to the accepted algorithms
          # https://pantheon.io/docs/ssh-keys#connections-fail-with-no-matching-host-key-type-found-their-offer-ssh-rsa
          echo "Host *.drush.in" > ~/.ssh/config
          echo "    HostkeyAlgorithms +ssh-rsa" >> ~/.ssh/config
          echo "    PubkeyAcceptedAlgorithms +ssh-rsa" >> ~/.ssh/config
          export PATH=/home/circleci/app/tests/vendor/bin:/tmp/vendor/pantheon-systems/terminus/bin:$PATH
          # Log in via terminus first. Required for tests that require user login.
          terminus auth:login --quiet --machine-token="$eGov_Terminus" --email="$eGov_Email" && terminus aliases
          # Prepare environment variables to be used by Percy
          if [[ $CIRCLE_BRANCH = "master" ]]; then
            echo 'export SITE_NAME="dev"' > $BASH_ENV && source $BASH_ENV
          else
            echo 'export SITE_NAME=${CIRCLE_BRANCH}' > $BASH_ENV && source $BASH_ENV
          fi
          mkdir /home/circleci/artifacts
          cd /home/circleci/app/tests/percy
          # Start Percy sandbox tests 
          TESTFILES=$(circleci tests glob "__sandbox_tests__/*.js" | circleci tests split)
          for TESTFILE in $TESTFILES
          do
            # Generate one time login link for tests
            echo 'export SUPERADMIN_LOGIN=$(terminus drush ${CIRCLE_PROJECT_REPONAME}.${SITE_NAME} -- uli --name superAdmin)' > $BASH_ENV && source $BASH_ENV
            npm run jest-sandbox -- ${TESTFILE}
          done
    - store_artifacts:
        path: /home/circleci/artifacts
        destination: /


# Declare all of the jobs we should run.
version: 2.1
jobs:
  deploy:
    <<: *build_and_deploy
  visual_regression:
    <<: *visual_regression
  clone_live_database:
    <<: *clone_live_database

orbs:
  percy: percy/agent@0.1.2

# Declare a workflow that runs all of our jobs in parallel.
workflows:
  version: 2
  deploy_and_test:
    when:
      not:
        equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - deploy
      - visual_regression:
          requires:
            - deploy
      # - percy/finalize_all:
      #     requires:
      #       - visual_regression
  # The update database workflow runs when the scheduled pipeline named "Update Sandbox
  # Database" runs. Scheduled pipelines are configured in the CircleCI web UI at
  # https://app.circleci.com/settings/project/github/eGovPDX/employees/triggers
  update_database:
    when:
      and:
        - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        - equal: [ "Update Sandbox Database", << pipeline.schedule.name >> ]
    jobs:
      - clone_live_database
