<?php

use Drupal\group\Entity\Group;
use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\views\Views;
use Drupal\Core\Form\FormStateInterface;
use Drupal\user\Entity\User;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Language\LanguageInterface;
use Drupal\file\Plugin\Field\FieldType\FileFieldItemList;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Url;
use Drupal\menu_link_content\Entity\MenuLinkContent;

/**
 * Implements hook_form_alter()
 */
function employees_form_alter(&$form, &$form_state, $form_id)
{
  // POWR-3694 - disable HTML 5 validation for all forms
  $form['#attributes']['novalidate'] = '';
  // TOOD: remove this once something similar is included in core, or the Drupal community
  // decides how it wants to handle accessible and usable validation.

  switch($form_id) {
    case "menu_link_content_menu_link_content_form":
    case "menu_link_content_menu_link_content_edit_form":
      $form['#validate'][] = '_validate_unique_menu_link';
      break;
    case "group_content_employee-group_membership_add_form":
    case "group_content_employee-group_membership_edit_form":
    case "group_content_private-group_membership_add_form":
    case "group_content_private-group_membership_edit_form":
      $options = &$form["group_roles"]["widget"]["#options"];
      if( array_key_exists("employee-admin", $options) ) {
        $options["employee-admin"] = 'Admin: choose one of Admin, Editor, or Reviewer';
      }
      if( array_key_exists("employee-assigned", $options) ) {
        $options["employee-assigned"] = 'Assigned: can view group content';
      }
      if( array_key_exists("employee-editor", $options) ) {
        $options["employee-editor"] = 'Editor: choose one of Admin, Editor, or Reviewer';
      }
      if( array_key_exists("employee-employee", $options) ) {
        $options["employee-employee"] = 'Employee: assigned automatically by AD sync';
      }
      if( array_key_exists("employee-reviewer", $options) ) {
        $options["employee-reviewer"] = 'Reviewer: choose one of Admin, Editor, or Reviewer';
      }
      if( array_key_exists("private-admin", $options) ) {
        $options["private-admin"] = 'Admin: choose one of Admin, Editor, or Reviewer';
      }
      if( array_key_exists("private-assigned", $options) ) {
        $options["private-assigned"] = 'Assigned: can view group content';
      }
      if( array_key_exists("private-editor", $options) ) {
        $options["private-editor"] = 'Editor: choose one of Admin, Editor, or Reviewer';
      }
      if( array_key_exists("private-reviewer", $options) ) {
        $options["private-reviewer"] = 'Reviewer: choose one of Admin, Editor, or Reviewer';
      }

      //  Don't modify role checkboxes for site admins
      $current_user_roles = \Drupal::currentUser()->getRoles();
      if( in_array("administrator", $current_user_roles) ) {
        $form['#attached']['drupalSettings']['isAdmin'] = true;
      }
      else {
        $form['#attached']['drupalSettings']['isAdmin'] = false;
      }

      $form['#attached']['library'][] = 'employees/employees';
      $form["group_roles"]["widget"]["#required"] = true;
      break;
    case "group_content_employee-group_membership_group-join_form":
      $form['actions']['submit']['#value'] = t('Follow group');
      break;
    case "group_content_employee-group_membership_group-leave_form":
      $form['actions']['submit']['#value'] = t('Unfollow group');
      break;
    case "media_library_add_form_media_remote":
      // Add remote document validater to the start of array
      array_unshift($form['#validate'], '_validate_remote_document_in_media_library');
      // Add help text to media library input field on Chart, Form, and Map media type
      $current_media_type = $form_state->getStorage("media_library_state")['media_library_state']->getSelectedTypeId();
      if( $current_media_type == 'iframe' ) {
        $config = \Drupal::config('field.field.media.iframe.field_media_media_remote');
        $form['container']['url']['#description'] = [
          '#markup' => $config->get('description'),
        ];
      }
      // Intentionally avoid using "break" here. Not a bug.
    case "media_library_add_form_upload":
    case "media_library_add_form_oembed":
      if( array_key_exists('media', $form) ) {
        $form["media"][0]["fields"]["name"]["widget"][0]["value"]["#default_value"] = '';
        $form["media"][0]["fields"]["field_display_in_group"]["widget"][0]['target_id']['#required'] = true;
        unset($form["media"][0]["fields"]["field_file_size"]);
        unset($form["media"][0]["fields"]["field_mime_type"]);
        $group_id = \Drupal::request()->getSession()->get('parent_group_id');
        if($group_id) {
          $form["media"][0]["fields"]['field_display_in_group']['widget'][0]['target_id']['#default_value'] = Group::load($group_id);
          // $group_id = \Drupal::request()->getSession()->remove('parent_group_id');
        }
      }
      break;
    case "media_remote_document_edit_form":
    case "media_remote_document_add_form":
      // Add remote document validater to the start of array
      array_unshift($form['#validate'], '_validate_remote_document');
      if( array_key_exists('media', $form) ) {
        $form["name"]["widget"][0]["value"]["#default_value"] = '';
        $form["field_display_in_group"]["widget"][0]['target_id']['#required'] = true;
        unset($form["field_file_size"]);
        unset($form["field_mime_type"]);
        // Only set default group for new item
        if($form_id === "media_remote_document_add_form") {
          $group_id = \Drupal::request()->getSession()->get('parent_group_id');
          if($group_id) {
            $form['field_display_in_group']['widget'][0]['target_id']['#default_value'] = Group::load($group_id);
            // $group_id = \Drupal::request()->getSession()->remove('parent_group_id');
          }
        }
      }
      break;
    // PE-595 Add a custom submit handler to the Resource form submit action to alter the redirect URL
    case "node_resource_form":
    case "node_resource_edit_form":
      $form['actions']['submit']['#submit'][] = '_resource_node_form_submit';
      // Intentionally avoid using "break" here. Not a bug.
    case "node_event_form":
    case "node_event_edit_form":
    case "node_news_form":
    case "node_news_edit_form":
    case "node_page_form":
    case "node_page_edit_form":
      $form['#validate'][] = '_validate_send_reviewer_notification_date';
      break;
  }
}

/**
 * A helper function to redirect Resource form submissions to their latest revision URL
 * instead of their canonical 'view' URL because that URL is rabbit hole redirected to
 * the resource's destination URL.
 */
function _resource_node_form_submit($form, FormStateInterface $form_state) {
  $node = $form_state->getFormObject()->getEntity();

  $form_state->setRedirect(
    'entity.node.revision',
    ['node' => $node->id(),
    'node_revision' => $node->getLoadedRevisionId()]
  );

  // This is a bit of a hack as it forces the redirect to execute immediately instead of allowing
  // Drupal's native form processing to handle it. But our redirect gets overwritten by other
  // redirects if left to the default handling.
  $url = $form_state->getRedirect()->setAbsolute()->toString();
  $response = new RedirectResponse($url);
  $response->send();
}

/**
 * A helper function to validate document.
 */
function _validate_remote_document(&$form, FormStateInterface $form_state)
{
  $remote_document_url = $form_state->getValue("field_media_media_remote")[0]['value'];
  // Append "/file/document" if it's missing on an eFiles link in order to retrieve mime type and file size
  if (
    strpos($remote_document_url, 'https://efiles.portlandoregon.gov/') === 0 &&
    !(substr_compare($remote_document_url, "/file/document", -strlen("/file/document")) === 0)
  ) {
    $remote_document_url .= "/file/document";
  }

  if (strlen($remote_document_url) == 0) {
    $form_state->setErrorByName('field_media_media_remote][0][value', 'This field is required.');
    return;
  }

  // Get eFiles file size and MIME type
  try {
    $headers = get_headers($remote_document_url, 1);
  } catch (Exception $e) {
    $form_state->setErrorByName('field_media_media_remote][0][value', 'Cannot retrieve file size and mimetype from this link.');
    return;
  }

  if (
    !empty($headers) &&
    (substr_compare($headers[0], "200 OK", -strlen("200 OK")) === 0) &&
    array_key_exists('Content-Type', $headers) &&
    array_key_exists('Content-Length', $headers)
  ) {
    $file_size = isset($headers['Content-Length']) ? (int)$headers['Content-Length'] : 0;
    if ($file_size === 0) {
      $form_state->setErrorByName('field_media_media_remote][0][value', t('The linked file is empty.'));
      return;
    }
    // Content-Type header can be "text/html; charset=utf-8"
    $content_type_array = explode(';', $headers['Content-Type']);
    // If content type is text/HTML, it's not a file
    if (empty($content_type_array) || $content_type_array[0] === "text/html") {
      // Commented this line out to support existing documents that are linked to an eFiles folder
      // $form_state->setErrorByName('field_efiles_link][0][value', t('The linked file is an HTML page. Please use External Resource instead.'));
      return;
    }

    $form_state->setValue('field_file_size', [["value" => $file_size]]);
    $form_state->setValue('field_mime_type', [["value" => $content_type_array[0]]]);
  }
}

/**
 * A helper function to validate remote document in media library dialog.
 */
function _validate_remote_document_in_media_library(&$form, FormStateInterface $form_state)
{
  // DO NOT validate when the user clicks on the remove document button.
  // ONLY validate when the entire form is submitted.
  if ($form_state->getTriggeringElement()["#name"] === "media-0-remove-button") return;

  $current_media_type = $form_state->getStorage("media_library_state")['media_library_state']->getSelectedTypeId();
  if( $current_media_type == 'remote_document' ) {
    // $remote_document_url = $form_state->getUserInput()['url'];
    $remote_document_url = $form_state->getValue('media')[0]['fields']['field_media_media_remote'][0]['value'];
    // Append "/file/document" if it's missing on an eFiles link in order to retrieve mime type and file size
    if (
      strpos($remote_document_url, 'https://efiles.portlandoregon.gov/') === 0 &&
      !(substr_compare($remote_document_url, "/file/document", -strlen("/file/document")) === 0)
    ) {
      $remote_document_url .= "/file/document";
    }

    if (strlen($remote_document_url) == 0) {
      $form_state->setErrorByName('field_media_media_remote][0][value', 'This field is required.');
      return;
    }

    // Get eFiles file size and MIME type
    try {
      $headers = get_headers($remote_document_url, 1);
    } catch (Exception $e) {
      $form_state->setErrorByName('field_media_media_remote][0][value', 'Cannot retrieve file size and mimetype from this link.');
      return;
    }

    if (
      !empty($headers) &&
      (substr_compare($headers[0], "200 OK", -strlen("200 OK")) === 0) &&
      array_key_exists('Content-Type', $headers) &&
      array_key_exists('Content-Length', $headers)
    ) {
      $file_size = isset($headers['Content-Length']) ? (int)$headers['Content-Length'] : 0;
      if ($file_size === 0) {
        $form_state->setErrorByName('field_media_media_remote][0][value', t('The linked file is empty.'));
        return;
      }
      // Content-Type header can be "text/html; charset=utf-8"
      $content_type_array = explode(';', $headers['Content-Type']);
      // If content type is text/HTML, it's not a file
      if (empty($content_type_array) || $content_type_array[0] === "text/html") {
        // Commented this line out to support existing documents that are linked to an eFiles folder
        // $form_state->setErrorByName('field_efiles_link][0][value', t('The linked file is an HTML page. Please use External Resource instead.'));
        return;
      }

      $form_state->getValue('media')[0]['fields']['field_file_size'] = [["value" => $file_size]];
      $form_state->getValue('media')[0]['fields']['field_mime_type'] = [["value" => $content_type_array[0]]];
    }
  }
}

/**
 * A helper function to validate the 'Send reviewer notification email' date field.
 */
function _validate_send_reviewer_notification_date(&$form, FormStateInterface $form_state)
{
  $notification_date = $form_state->getValue("field_send_reviewer_notification")[0]['value'];
  if ($notification_date) {
    $notification_date = date_create($notification_date)->getTimestamp();

    if ($notification_date <= time()) {
      $form_state->setErrorByName('field_send_reviewer_notification][0][value', 'Send reviewer notification email date must be a future date. You can also clear an existing date if you no longer want a reminder set.');
    } elseif (!$form_state->getValue("field_reviewer")[0]['target_id']) {
      $form_state->setErrorByName('field_send_reviewer_notification][0][value', 'Send reviewer notification email cannot be set if there are no assigned reviewers for this content. Use the \'Notify reviewers\' field to assign reviewers.');
    }
  }
}

/**
 * Implements hook_query_TAG_alter().
 * Alter user query from "John Doe" into "John.Doe" to support autocomplete.
 */
function employees_query_entity_query_user_alter(AlterableInterface $query)
{
  $selection_handler = $query->getMetaData('entity_reference_selection_handler');
  if ($selection_handler != null && $selection_handler->getPluginId() == "default:user") {
    $conditions = $query->conditions();
    if (empty($conditions)) return;
    foreach ($conditions as $key => $condition) {
      if (!is_array($condition)) continue;
      if (!array_key_exists('field', $condition)) continue;
      if ($condition['field'] != "users_field_data.name") continue;
      $value_orig = $condition['value'];
      if (!is_string($value_orig)) continue;

      // Replace the first blank space with "."
      $pos = strpos($value_orig, ' ');
      if ($pos !== false) {
        $query->conditions()[$key]['value'] = substr_replace($value_orig, '.', $pos, strlen(' '));
      }
    }
  }
}

/**
 * Implements hook_entity_insert().
 */
function employees_entity_insert($entity)
{
  _notify_reviewer($entity, 'created');
  _notify_group_admin_for_group_change($entity);
  _update_alias_for_menu_linked_node($entity);
}

/**
 * Background: when an entity is revisionable, the files from any past revisions count
 * towards the usage for that file. In our use-case, this behavior is undesirable. We want
 * to purge the files from any old revisions in order to save storage space.
 * Revisions should only be used to view content changes and see the authoring user/time.
 *
 * By purging the usage from files in past revisions, we ensure they get marked as temporary.
 *
 * @see PGOV-880, PE-475, PE-632
 */
function _remove_file_usage_from_previous_revision($entity) {
  // Get the language of the content that the editor is modifying
  $langcode = \Drupal::languageManager()->getCurrentLanguage(LanguageInterface::TYPE_CONTENT)->getId();
  $entity_type_id = $entity->getEntityTypeId();
  // We only want to affect revisionable nodes & media
  if (($entity_type_id !== 'node' && $entity_type_id !== 'media')
    || !$entity->getEntityType()->isRevisionable()) return;

  $entity_id = $entity->id();
  $entity_storage = \Drupal::entityTypeManager()->getStorage($entity_type_id);
  // Retrieve the revision before this one
  $previous_vid = key($entity_storage->getQuery()
      ->accessCheck(TRUE)
      ->allRevisions()
      ->condition($entity_type_id === 'node' ? 'nid' : 'mid', $entity_id)
      ->sort('vid', 'DESC')
      ->range(1, 1)
      ->execute());
  if (empty($previous_vid)) return;

  $previous_revision = $entity_storage->loadRevision($previous_vid);
  if (!$previous_revision->hasTranslation($langcode)) return;

  $previous_revision_translated = $previous_revision->getTranslation($langcode);

  foreach ($previous_revision_translated->getFields() as $field) {
    if ($field instanceof FileFieldItemList) {
      foreach ($field as $item) {
        // Get all FIDs from the current revision
        $latest_revision_file_ids = array_map(fn($file) => $file['target_id'], $entity->get($field->getName())->getValue());
        $file = $item->entity;
        // If the file from the previous revision was deleted in the current revision,
        // delete all file usages for it.
        if ($file && !in_array($file->id(), $latest_revision_file_ids)) {
          \Drupal::service('file.usage')->delete($file, 'file', $entity_type_id, $entity_id, 0);
          \Drupal::logger('employees')->info('File (ID: %id) "%path" usage cleared. Current user ID: %user_id. Request URI: %request_uri', [
            '%id' => $file->id(),
            '%path' => $file->getFileUri(),
            '%user_id' => \Drupal::currentUser()->id(),
            '%request_uri' => \Drupal::request()->getRequestUri(),
          ]);
        }
      }
    }
  }
}

/**
 * Implements hook_entity_update().
 */
function employees_entity_update($entity)
{
  _remove_file_usage_from_previous_revision($entity);
  _notify_reviewer($entity, 'updated');
  _notify_group_admin_for_group_change($entity);
  _update_alias_for_menu_linked_node($entity);
  _invalidate_group_page_menu_cache($entity);
}

/**
 * Helper function to invalidate the entity's primary group page menu cache.
 */
function _invalidate_group_page_menu_cache($entity) {
  if ($entity->getEntityTypeId() === 'node' && 
    $entity->hasField('field_display_in_group') &&
    $entity->field_display_in_group->count() > 0) {
    $group = $entity->field_display_in_group->referencedEntities()[0];
    if(empty($group)) return;
    $group_page_menu = group_content_menu_get_menus_per_group($group);
    if(empty($group_page_menu)) return;
    \Drupal::service('cache_tags.invalidator')->invalidateTags(["group_menu_link_content-" . $group_page_menu[0]->getEntityId()]);
  }
}

/**
 * Implements hook_media_presave()
 */
function employees_media_presave($media) {
  // Copy Preview Image file into Thumbnail. Do nothing if Preview Image is empty.
  if($media->hasField('field_preview_image') &&
      $media->hasField('thumbnail') &&
      ! empty($media->field_preview_image->target_id)) {
    $media->thumbnail->target_id = $media->field_preview_image->target_id;
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function employees_user_presave($entity)
{
  $is_publisher = in_array('publisher', $entity->getRoles());
  if($entity->isNew() && $is_publisher) {
    // Record the date time
    $now = new DrupalDateTime('now', 'UTC');
    $entity->field_publisher_role_changed = $now->format('Y-m-d\TH:i:s');
  }
  else if ($entity->original != null){
    // Check if the user's publisher role changed
    $was_publisher_before_update = in_array('publisher', $entity->original->getRoles());
    if( ($was_publisher_before_update != $is_publisher) || // Publisher role changed
        // Was Publisher AND Status was changed in this update
       ($was_publisher_before_update && ($entity->status->value != $entity->original->status->value))) {
      // Record the date time
      $now = new DrupalDateTime('now', 'UTC');
      $entity->field_publisher_role_changed = $now->format('Y-m-d\TH:i:s');
    }
  }
}

/**
 * Implements hook_mail().
 */
function employees_mail($key, &$message, $params)
{
  $options = array(
    'langcode' => $message['langcode'],
  );
  switch ($key) {
    case 'employees_daily_mail':
    case 'employees_notify_reviewers':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = t('@title', array('@title' => $params['title']), $options);
      $message['body'][] = $params['message'];
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
      $message['headers']['Reply-To'] = $params['reply_to'];
      break;
    case 'employees_group_admin_email':
      $user = \Drupal::currentUser()->getAccount();
      $user_name = $user->name;
      $user_email = $user->getEmail();

      if (array_key_exists('group', $params)) {
        $group = $params['group'];
        $group_path = $params['group_path'];

        $body_metadata = "<p><em>Message sent by $user_name via group <a href=\"$group_path\">$group</a></em></p>";
      } else {
        $body_metadata = "<p><em>Message sent by $user_name</em></p>";
      }

      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = t('@subject', array('@subject' => $params['subject']), $options);
      $message['body'][] = $body_metadata . $params['message'];
      $message['headers']['Reply-To'] = "\"$user_name\" <$user_email>";
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
      break;
  }
}

/**
 * Helper function to notify reviewers on content updates
 *
 * @param $entity
 *   The entity being created, updated, or deleted
 * @param $entity_event_type
 *   "created", "updated", or "deleted"
 */
function _notify_reviewer($entity, $entity_event_type)
{
  // Only notify on nodes that has Moderation State and has the Reviewer field
  if (
    $entity->getEntityTypeId() != 'node' ||
    !$entity->hasField('moderation_state') ||
    !$entity->hasField('field_reviewer')
  ) {
    return;
  }
  $node = $entity;
  $status_message = $entity_event_type;

  // Group module would save the node twice when creating a new node.
  // We only want to send out email once.
  if ($entity->hasField('field_display_groups') && $node->field_display_groups->count() > 0) {
    $vids = \Drupal::entityTypeManager()->getStorage('node')->revisionIds($node);
    if (count($vids) ==  1 && $entity_event_type == 'created') {
      return;
    }
    if (count($vids) ==  2 && $entity_event_type == 'updated') {
      $status_message = 'created';
    }
  }

  $reviewers = null;
  $latest_and_previous_revs = _load_latest_revision($node);
  $latest_rev = $latest_and_previous_revs['latest'];
  $reviewers = $node->field_reviewer;

  $revision_log_output = $node->revision_log->value ?
    "<div><h3>Revision log:</h3>\r\n" . $node->revision_log->value . "</div>\r\n<p/>\r\n<div>" : '';

  $moderation_state_message = [
    'review' => 'In review',
    'draft' => 'Draft',
    'unpublished' => 'Unpublished/Archived',
    'published' => 'Published',
  ];

  // send email for any moderation state except draft
  if ($latest_rev->moderation_state->value != 'draft') {
    $key = 'employees_notify_reviewers';
    $params['title'] = 'Employees.portland.gov reviewer update';
    $langcode = \Drupal::currentUser()->getPreferredLangcode();
    $params['message'] = "You have been assigned to review <a href=\"/node/" . $node->id() .
      "/revisions/" . $node->vid->value . "/view\"> " . $latest_rev->label() .
      "</a> . You will be notified of all changes to this content.<p/>" .
      "<a href=\"" . $node->revision_uid->entity->toUrl()->toString() . "\">" . $node->revision_uid->entity->label() .
      "</a> " . $status_message . " a new <strong>" . $moderation_state_message[$latest_rev->moderation_state->value] .
      "</strong> revision at " .
      \Drupal::service('date.formatter')->format($node->changed->value, 'custom', 'l Y/n/j g:i A') .
      ".<p/>" . $revision_log_output;

    if ($reviewers == null) {
      return;
    }

    // PE-488 Get the revision author's email. This used to be the current user's email which is empty during cron job runs.
    $current_user_email = $node->revision_uid->entity->getEmail();
    // If it's empty, DO NOT send email.
    if(empty($current_user_email)) {
      \Drupal::logger('mail-log')->error(t('The latest revision author\'s email address for Node ID @id is empty.', array('@id' => $node->id())));
      return;
    }
    // This will be used in employees_mail to set the Reply-To header
    $params['reply_to'] = $current_user_email;

    // Send email to all reviewers EXCEPT the author
    $to_emails = [];
    foreach ($reviewers->referencedEntities() as $reviewer) {
      if ($reviewer->id() != $node->revision_uid->entity->id()) {
        $to_emails[] = $reviewer->mail->value;
      }
    }
    if (!empty($to_emails)) {
      _send_email($key, implode(',', $to_emails), $langcode, $params, $current_user_email);
    }
  }
}

/**
 * Helpder function to send email
 */
function _send_email($key, $to, $langcode, $params, $from)
{
  // function mail($module, $key, $to, $langcode, $params = [], $reply = NULL, $send = TRUE)
  $result = \Drupal::service('plugin.manager.mail')->mail('employees', $key, $to, $langcode, $params, $from, true);
  if ($result['result'] != true) {
    \Drupal::logger('mail-log')->error(t('Error sending to @email.', array('@email' => $to)));
    return false;
  } else {
    // drupal_set_message($message);
    \Drupal::logger('mail-log')->notice(t('Email sent to @email ', array('@email' => $to)));
    return true;
  }
}

/**
 * Helper function to get the latest revision
 */
function _load_latest_revision($node)
{
  $vids = \Drupal::entityTypeManager()->getStorage('node')->revisionIds($node);
  $latest_vid = end($vids);
  $previous_vid = prev($vids);
  return [
    "latest" => \Drupal::entityTypeManager()->getStorage('node')->loadRevision($latest_vid),
    "previous" =>  $previous_vid ? \Drupal::entityTypeManager()->getStorage('node')->loadRevision($previous_vid) : null,
  ];
}

/**
 * Add destination parameter to log in/out URLs.
 *
 * Implements hook_preprocess_menu__account().
 */
function westy_preprocess_menu__account(array &$variables)
{
  $variables['#cache']['max-age'] = 0;
  $destination = \Drupal::request()->getRequestUri();

  if (isset($variables['items']['user.logout']['url'])) {
    $variables['items']['user.logout']['url']->setRouteParameter("destination", $destination);
  }
}

/**
 * Implements hook_token_info().
 */
function employees_token_info()
{
  $info = [];

  $info['types']['server'] = [
    'name' => t('Server vars'),
    'description' => t('Tokens from _SERVER.'),
  ];

  $info['tokens']['server']['HTTP_REFERER'] = [
    'name' => t('HTTP_REFERER'),
    'description' => t("Referrer header value from _SERVER"),
  ];

  $info['tokens']['server']['HTTP_USER_AGENT'] = [
    'name' => t('HTTP_USER_AGENT'),
    'description' => t("User-agent header value from _SERVER"),
  ];

  return $info;
}

/**
 * Implements hook_tokens().
 */
function employees_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata)
{
  $replacements = [];
  $sanitize = !empty($options['sanitize']);

  // Text format tokens.
  if ($type == 'server') {
    foreach ($tokens as $name => $original) {
      $replacements[$original] = $_SERVER[$name];
      if ($sanitize) {
        $replacements[$original] = filter_xss($replacements[$original]);
      }
    }
  }

  return $replacements;
}

/**
 * Implement hook_cron()
 */
function employees_cron()
{
  _content_updated_recently();
  _send_reviewer_notifications();
}

/**
 * Retrieve a view and send it to BTS-eGov@portlandoregon.gov
 */
function _content_updated_recently()
{
  // In each cron run after 12pm, check if we've sent the content update summary email today.
  $hour = (int)(date('G')); // 0 to 23
  if ($hour >= 12) {
    // If an email is already sent today, do not send again
    $last_daily_email_sent = \Drupal::state()->get('portland.last_daily_email_sent');
    if (!empty($last_daily_email_sent) && $last_daily_email_sent === date('m/d/Y')) {
      return;
    }

    $results = '';

    // Define a list of views that will be included in the email
    $views[] = ['view_id' => 'content_updated_recently', 'block_id' => 'block_tables'];  // Tables
    $views[] = ['view_id' => 'content_updated_recently', 'block_id' => 'block_urls'];    // Body text URLs
    $views[] = ['view_id' => 'media_updated_recently', 'block_id' => 'block_videos_updated'];    // Videos
    $views[] = ['view_id' => 'users_updated_recently', 'block_id' => 'block_publishers_updated'];    // Publishers

    foreach ($views as $view) {
      // Get the view by machine id
      $theview = Views::getView($view['view_id']);
      // Set the display machine id
      $theview->setDisplay($view['block_id']);
      $theview->preExecute();
      $theview->execute();

      if (count($theview->result)) {
        // Render the view and append to results
        $rendered = $theview->render($view['block_id']);
        $results .= \Drupal::service('renderer')->renderPlain($rendered);
      }
    }

    // If all views are empty, do not send the email
    if (!strlen($results)) {
      \Drupal::state()->set('portland.last_daily_email_sent', date('m/d/Y'));
      \Drupal::logger('mail-log')->notice(t('No content updated in the past day.'));
      return;
    }

    // Add environment name to the email subject if it's not Live
    $environment_name = '';
    if(isset($_ENV['PANTHEON_ENVIRONMENT']) && $_ENV['PANTHEON_ENVIRONMENT'] != 'live') {
        $environment_name = ' (' . $_ENV['PANTHEON_ENVIRONMENT'] . ')';
    }

    // Send email
    $key = 'employees_daily_mail'; // Replace with Your key
    $to = 'BTS-eGov@portlandoregon.gov';
    $params['reply_to'] = 'BTS-eGov@portlandoregon.gov';
    $params['message'] = '<p>These Employees.portland.gov items were updated in the last 24 hours and should
            be reviewed according to the specific instructions below.<p/>' . $results;
    $params['title'] = 'Employees.portland.gov list of content to review' . $environment_name;
    // Cron is run with the anonymous user. Set the language code to EN.
    $langcode = 'en';

    $sent_successfully = _send_email($key, $to, $langcode, $params, 'powr@portlandoregon.gov');
    if ($sent_successfully) {
      \Drupal::logger('mail-log')->notice(t('Daily content update summary email sent successfully.'));
      \Drupal::state()->set('portland.last_daily_email_sent', date('m/d/Y'));
    }
  }
}

/**
 * Retrieve a view of content with reviewer notifications and use it to send
 * emails to reviewers as appropriate.
 */
function _send_reviewer_notifications()
{
  // In each cron run after 6am, check if we've sent the content update summary email today.
  $hour = (int)(date('G')); // 0 to 23
  if ($hour >= 6) {
    // If an email is already sent today, do not send again
    $last_daily_email_sent = \Drupal::state()->get('portland.last_reviewer_notification_email_sent');
    if (!empty($last_daily_email_sent) && $last_daily_email_sent === date('m/d/Y')) {
      return;
    }

    // View that includes all content which has a value set for reviewer notification emails
    $view = ['view_id' => 'content_updated_recently', 'block_id' => 'block_reviewer_notifications'];

    // Get the view by machine id
    $theview = Views::getView($view['view_id']);
    // Set the display machine id
    $theview->setDisplay($view['block_id']);
    $theview->preExecute();
    $theview->execute();

    // If the view is empty, do not send any emails
    if (!count($theview->result)) {
      \Drupal::logger('mail-log')->notice(t('No content has been marked for reviewer notification emails.'));
      \Drupal::state()->set('portland.last_reviewer_notification_email_sent', date('m/d/Y'));
      return;
    }

    // Add environment name to the email subject if it's not Live
    $environment_name = '';
    if(isset($_ENV['PANTHEON_ENVIRONMENT']) && $_ENV['PANTHEON_ENVIRONMENT'] != 'live') {
        $environment_name = ' (' . $_ENV['PANTHEON_ENVIRONMENT'] . ')';
    }

    $email_count = 0;
    foreach ($theview->result as $result) {
      $id = $result->_entity->id();
      $entity_type = $result->_entity->getEntityTypeId();

      $notification_date = $result->_entity->get("field_send_reviewer_notification")->value;
      $notification_date = date_create($notification_date)->getTimestamp();

      $last_notification_date = \Drupal::keyValue('employees')->get("last_reviewer_notification_date.$entity_type.$id");
      if (empty($last_notification_date)) {
        $last_notification_date = 0;  // Equivalent to 1/1/1970 in Unix epoch format
      }

      // Create list of email recipients
      $to_emails = [];
      // $to_emails[] = $result->_entity->getOwner()->mail->value;
      $reviewers = $result->_entity->get("field_reviewer");
      foreach ($reviewers->referencedEntities() as $reviewer) {
        $to_emails[] = $reviewer->mail->value;
      }

      // Send reviewer notification email if an email hasn't already been sent
      // TODO: Remove "TRUE" debugging override
      if (!empty($to_emails) && ($last_notification_date < $notification_date)) {
        // Send email
        $key = 'employees_notify_reviewers';
        $to = $to_emails;
        $params['reply_to'] = 'BTS-eGov@portlandoregon.gov';
        $params['message'] = '<p>This is a notification that the following webpage is scheduled for review
                and should be updated if necessary:<p/>';
        $params['message'] .= "<p><a href=\"" . $result->_entity->toUrl()->toString() . "\">" . $result->_entity->get('title')->value . "</a><p/>";
        $params['title'] = 'Employees.portland.gov scheduled reviewer notification: ' . $result->_entity->get('title')->value . $environment_name;
        // Cron is run with the anonymous user. Set the language code to EN.
        $langcode = 'en';

        $sent_successfully = _send_email($key, implode(',', $to_emails), $langcode, $params, 'powr@portlandoregon.gov');

        // Record email timestamp to avoid resending email again on following days
        // Use the KeyValue API instead of State API beacuse of the potentially very large number of keys https://www.drupal.org/node/3177901
        if ($sent_successfully) {
          $email_count++;
          \Drupal::keyValue('employees')->set("last_reviewer_notification_date.$entity_type.$id", time());
        }
      }
    }
    // TODO: Remove debug return below
    // return;

    \Drupal::logger('mail-log')->notice(t("Seccessfully sent $email_count reviewer notification emails."));
    \Drupal::state()->set('portland.last_reviewer_notification_email_sent', date('m/d/Y'));
  }
}

/**
 * Helper function to notify group admin when editor/admin outside the group added the content
 * into this group.
 *
 * @param $entity
 *   The entity being created or updated
 * @param $entity_event_type
 *   "created" or "updated"
 */
function _notify_group_admin_for_group_change($entity)
{
  // Only notify on nodes that has Displayed In Group field and the field is NOT empty
  if (
    $entity->getEntityTypeId() != 'node' ||
    !$entity->hasField('field_display_in_group')
    //  || $entity->field_display_in_group->count() === 0
  ) {
    return;
  }
  $node = $entity;

  // Get the author of the latest revision
  $latest_and_previous_revs = _load_latest_revision($node);
  $latest_rev = $latest_and_previous_revs['latest'];
  $previous_rev = $latest_and_previous_revs['previous'];
  if( $latest_rev == null) return;

  //Check if "display_in_group" changed since last revision
  $latest_parent_groups = $latest_rev->get('field_display_in_group')->referencedEntities();
  if( $previous_rev != null ) {
    //Check if "display_in_group" changed since last revision
    $previous_parent_groups = $previous_rev->get('field_display_in_group')->referencedEntities();
    // Do nothing if the display_in group didn't change from the previous revision
    if($latest_parent_groups == $previous_parent_groups) return;
  }

  $revision_author_user_id = $latest_rev->revision_uid->target_id;
  $revision_author = User::load($revision_author_user_id);

  // DO NOT send the notification if the user is a site-wide admin or editor
  $site_roles = $revision_author->getRoles();
  $site_wide_editor_or_admin = [
    "publisher",
    "administrator",
    "site_editor",
  ];
  foreach($site_roles as $site_role) {
    if( in_array($site_role, $site_wide_editor_or_admin) ) return;
  }

  // Rare but possible: there could be duplicated groups
  $latest_parent_groups = array_unique($latest_parent_groups, SORT_REGULAR);

  // For each group in field_display_in_group, check if the revision author is an
  // admin/editor in that group. If NOT, send a email to the group's admin
  $groups_to_notify = [];
  foreach($latest_parent_groups as $entity_parent_group) {
    // Get the user's group membership
    $membership = $entity_parent_group->getMember($revision_author);
    // The user is NOT in the group
    if( $membership == null ) {
      $groups_to_notify []= $entity_parent_group;
    }
    else {
      $roles = $membership->getRoles();
      if( in_array("employee-editor", array_keys($roles)) ||
          in_array("employee-admin", array_keys($roles))
        ) continue;

      // If the user is neither Admin nor Editor, the group should be notified
      $groups_to_notify []= $entity_parent_group;
    }
  }

  if( empty($groups_to_notify) ) return;

  // send email for any moderation state except draft
  $key = 'employees_notify_reviewers';
  $params['title'] = 'Employees.portland.gov content added to your group by non-group members';
  $langcode = \Drupal::currentUser()->getPreferredLangcode();
  $revision_log_output = $node->revision_log->value ?
    "<div><h3>Revision log:</h3>\r\n" . $node->revision_log->value . "</div>\r\n<p/>\r\n<div>" : '';

  foreach($groups_to_notify as $group_to_notify) {
    $params['message'] = "As the group admin for <a href=\"/group/" . $group_to_notify->id() .
    "\"> " . $group_to_notify->label() . "</a>, you are being notified that <a href=\"" . $node->revision_uid->entity->toUrl()->toString() . "\">" . $node->revision_uid->entity->label() .
    "</a> has added <a href=\"/node/" . $node->id() .
      "/revisions/" . $node->vid->value . "/view\"> " . $latest_rev->label() .
      "</a> to <a href=\"/group/" . $group_to_notify->id() .
      "\"> " . $group_to_notify->label() . "</a> at " .
      \Drupal::service('date.formatter')->format($node->changed->value, 'custom', 'l Y/n/j g:i A') .
      ".<p/>" . $revision_log_output;

    $current_user_email = \Drupal::currentUser()->getAccount()->getEmail();
    $params['reply_to'] = $current_user_email;
    // Send email to all group admins
    $group_to_notify_admins = $group_to_notify->getMembers(['employee-admin']);
    $to_emails = [];
    foreach ($group_to_notify_admins as $group_to_notify_admin) {
      $to_emails[] = $group_to_notify_admin->getUser()->mail->value;
    }
    if (!empty($to_emails)) _send_email($key, implode(',', $to_emails), $langcode, $params, $current_user_email);
  }
}

/**
 * Implement hook_preprocess_HOOK(&$variables)
 */
function employees_preprocess_fieldset(&$variables) {
  // If the fieldset ID matches certain string and the Description is not empty, move
  // description into prefix so it will be displayed right below the fieldset title.
  // See web/core/themes/claro/templates/fieldset.html.twig
  if(
    // Find your fieldset ID in the <fieldset id="ID_HERE" ...> tag.
    // Comment out this line below if you want to target all Fieldsets
    array_key_exists('id', $variables["attributes"]) &&
    $variables["attributes"]["id"] == "group-user-profile" &&
    !empty($variables['description']) &&
    !empty($variables['description']["content"])
  ) {
    $variables['prefix'] = $variables['description']["content"];
    unset($variables['description']);
  }
}


/**
 * Implement hook_preprocess_HOOK(&$variables)
 * Hide user email field if email starts with "no.email"
 */
function employees_preprocess_block(&$variables) {
  if($variables["plugin_id"] == "field_block:user:user:mail" &&
    substr($variables["content"][0]["#title"], 0, 8) == "no.email" ) {
    $variables["content"] = [];
  }
  else if($variables['plugin_id'] === "group_content_menu:page_menu") {
    unset($variables['label']); // Remove the "Page menu" label

    // Prepare the group ID and menu ID in order to build the link for the "Manage menu" button. Only display the button if the user has the correct permission.
    if(array_key_exists("#contextual_links", $variables["elements"]) && 
      array_key_exists("group_menu", $variables["elements"]["#contextual_links"]) ) {
      $group_menu = $variables["elements"]["#contextual_links"]["group_menu"];

      $group_id = $group_menu['route_parameters']['group'];
      if( !empty($group_id) ) {
        $group = Group::load($group_id);
        if( !empty($group) ) {
          $current_user = \Drupal::currentUser();
          if($group->hasPermission("manage group_content_menu menu items", $current_user)) {
            // These array keys are defined by group_cotent_menu. Should be safe to access without checking if key exists
            $variables['group_id'] = $group_menu['route_parameters']['group'];
            $variables['menu_id'] = $group_menu['route_parameters']['group_content_menu'];
          }
        }
      }

      $link_tree_service = \Drupal::service('menu.link_tree');
      // [ "menu_link_content:UUID" => MenuLinkTreeElement object]

      if( array_key_exists("#menu_name", $variables["content"]) ) {
        $menu_tree = $link_tree_service->load($variables["content"]["#menu_name"], new \Drupal\Core\Menu\MenuTreeParameters());
      
        // Find out if a node in the menu is published.
        $menu_link_properties = [];
        foreach($menu_tree as $key => $menu_link_tree_element) {
          _get_node_published_value($menu_link_tree_element, $menu_link_properties);
        }

        // Update the variables for the template
        _set_published_status($variables["content"]["#items"], $menu_link_properties);
      }
    }
  }
}

/**
 * Helper function to traverse the menu tree and get the published status for each internal node
 */
function _get_node_published_value($menu_link_tree_element, &$menu_link_properties) {
  $menu_link_url = $menu_link_tree_element->link->getUrlObject();
  $key = $menu_link_tree_element->link->getPluginId();

  if( $menu_link_url->isExternal() ) {
    // Treat all external links as published
    $menu_link_properties[$key] = [
      "isPublished" => true,
    ];
  }
  else {
    if($menu_link_url->isRouted()) {
      $nid = $menu_link_url->getRouteParameters()["node"];
      $node = \Drupal::entityTypeManager()->getStorage('node')->load($nid);
      // If we can't find node, treat it as published
      $menu_link_properties[$key] = [
        "isPublished" => ($node == null) ? true : $node->isPublished(),
      ];
    }
    else {
      $menu_link_properties[$key] = [
        "isPublished" => true, // Default to Published if the URL is not routed
      ];
    }
  }

  if($menu_link_tree_element->hasChildren) {
    foreach($menu_link_tree_element->subtree as $key => $menu_link_tree_element) {
      _get_node_published_value($menu_link_tree_element, $menu_link_properties);
    }
  }
}

/**
 * Helper function to set the published status for each menu item in the build variables
 */
function _set_published_status(&$items, $menu_link_properties) {
  // Must use the reference to $item in order to update the isPublished value
  foreach($items as $key => &$item) {
    if( array_key_exists($key, $menu_link_properties) ) {
      $item["isPublished"] = $menu_link_properties[$key]["isPublished"];
      if(! empty($item["below"]) ) {
        _set_published_status($item["below"], $menu_link_properties);
      }
    }
  }
}

/**
 * Implements hook_pathauto_pattern_alter().
 */
function employees_pathauto_alias_alter(&$alias, array &$context) {
  if($context['module'] == "user") {
    $user = $context['data']['user'];
    $first_name = trim($user->field_first_name->value);
    $last_name = trim($user->field_last_name->value);

    // Do nothing if the user has both first name and last name
    if( !empty($first_name) && !empty($last_name ) ) return;

    // If there is no last AND first name, use account name
    if( empty($first_name) && empty($last_name ) ) {
      $alias_cleaner = \Drupal::service("pathauto.alias_cleaner");
      $alias = '/' . $alias_cleaner->cleanString($user->name->value);
      return;
    }

    // Either first name or last name is empty
    if( empty($first_name) ) {
      $alias = str_replace('/.', '/', $alias);
    }
    if( empty($last_name) ) {
      $alias = rtrim($alias, '.');
    }
  }
}

/**
 * Implements hook_theme().
 */
function employees_theme() {
  return array(
    // By convention, the template file will be media-embed-iframe.html.twig
    'media_embed_iframe' => array(
      'variables' => array(
        'url' => NULL,
        'attributes' => NULL,
      ),
      'template' => 'media-embed-iframe',
    ),
  );
}

/**
 * Implements hook_toolbar_alter().
 * Hide "Manage" toolbar menu element for non-admins.
 */
function employees_toolbar_alter(&$items) {
  $account = Drupal::currentUser();
  if (!in_array('administrator', $account->getRoles())) {
    $items['administration']['tab']['#attributes']['class'][] = 'd-none';
    $items['administration']['tray']['toolbar_administration']['#attributes']['class'][] = 'd-none';
    // Some views like /my-content are displayed in the Claro theme which doesn't have the `d-none` CSS
    // class defined so apply a style directly to the elements instead
    $items['administration']['tab']['#attributes']['style'][] = 'display: none !important;';
    $items['administration']['tray']['toolbar_administration']['#attributes']['style'][] = 'display: none !important;';
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function employees_entity_type_alter(array &$entity_types)
{
  $entity_types['node']->addConstraint('ResourceUrl', []);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Override the user login form to use the SAML login
 */
function employees_form_user_login_form_alter(&$form, &$form_state)
{
  if(
    isset($_ENV['PANTHEON_ENVIRONMENT']) &&
    in_array($_ENV['PANTHEON_ENVIRONMENT'], [
      'cddev', 'dev', 'test', 'live', 'sandbox', 'pe-619'])
  ) {
    $destination = \Drupal::request()->get('destination');
    $query = empty($destination) ? "?destination=/" : "?destination=$destination";
    // Override the default label of the submit button
    unset($form['name']);
    unset($form['pass']);
    unset($form['actions']);
    $form['saml'] = [
      '#type' => "button",
      '#value' => t('Log in with City of Portland network account'),
      '#name' => t('saml_login'),
      '#attributes' => [
        'class' => ['button'],
        'id' => 'saml_login',
        'onclick' => 'location.href="/saml/login'.$query.'";return false;',
      ],
    ];
  }
}

/**
 * Implement hook_ENTITY_TYPE_update()
 * Detect any changes in a Page Menu, re-save the node to update the URL alias
 */
function employees_group_content_menu_update($menu) {
  if($menu->bundle() !== "page_menu") return;
  $link_tree_service = \Drupal::service('menu.link_tree');
  // [ "menu_link_content:UUID" => MenuLinkTreeElement object]
  $menu_tree = $link_tree_service->load("group_menu_link_content-" . $menu->id(), new \Drupal\Core\Menu\MenuTreeParameters());

  foreach($menu_tree as $key => $menu_link_tree_element) {
    generate_alias($menu_link_tree_element);
  }
}

function generate_alias($menu_link_tree_element) {
  // Traverse the tree to re-generate alias
  $pathauto_generator = \Drupal::service('pathauto.generator');
  // The link field is a MenuLinkContent object
  $menu_link_url = $menu_link_tree_element->link->getUrlObject();
  try {
    if( !$menu_link_url->isExternal() && $menu_link_url->isRouted()) {
      $route_parameters = $menu_link_url->getRouteParameters();
      if( array_key_exists("node", $route_parameters) ) {
        $node_id = $route_parameters["node"];
        if( empty($node_id) ) {
          \Drupal::logger('employees')->error('Failed to load node ID for the route @route when saving Page Menu.', [
            '@route' => $menu_link_url->toString(),
          ]);
        }
        else {
          $node = Drupal\node\Entity\Node::load($node_id);
          if( $node == null ) {
            \Drupal::logger('employees')->error('Failed to load node @nid when saving Page Menu.', [
              '@nid' => $node_id,
            ]);
          }
          else {
            // Generate the alias for the node
            $pathauto_generator->updateEntityAlias($node, "update");
          }
        }
      }
      else {
        \Drupal::logger('employees')->error('Cannnot find the route parameter "node" for @route when saving Page Menu.', [
          '@route' => $menu_link_url->toString(),
        ]);
      }
    }
  }
  catch (\Exception $e) {
    \Drupal::logger('employees')->error('Failed to generate alias for node @nid when saving Page Menu. @message', [
      '@nid' => $node->id(),
      '@message' => $e->getMessage(),
    ]);
    \Drupal::messenger()->addError('Failed to generate path alias. Check the logs for more information.');
  }

  if($menu_link_tree_element->hasChildren) {
    foreach($menu_link_tree_element->subtree as $key => $menu_link_tree_element) {
      generate_alias($menu_link_tree_element);
    }
  }
}

function _validate_unique_menu_link(&$form, FormStateInterface $form_state) {
  $route_match = \Drupal::service('current_route_match');
  $parameters = $route_match->getParameters();
  $group = $parameters->get("group");
  $group_content_menu = $parameters->get("group_content_menu");
  $uri = $form_state->getValue("link")[0]["uri"];
  if(empty($uri)) {
    $form_state->setErrorByName('link', t('Link is a required field.'));
    return;
  }

  // Check if the link field contains a URL string on the same site. Try to convert it to an internal URI. Valid entries are:
  // https://host/path/to/node
  // internal:/path/to/node
  $scheme_and_host = \Drupal::request()->getSchemeAndHttpHost();
  $relative_uri = "";
  if(strpos($uri, $scheme_and_host) === 0) {
    $relative_uri = 'internal:' . substr($uri, strlen($scheme_and_host));
  }
  else if (strpos($uri, 'internal:') === 0) {
    // Make sure the relative path starts with "/"
    if (strpos($uri, 'internal:/') !== 0) {
      $form_state->setErrorByName('link', t('Relative paths must start with "/".'));
      return;
    }
    $relative_uri = $uri;
  }

  // The Link is not an internal link in string
  if(empty($relative_uri)) {
    $url = Url::fromUri($uri);
    // Do not validate external links
    if($url !== null && $url->isExternal()) return;
  }
  else {
    $url = Url::fromUri($relative_uri);
    // Check if the URL can be routed
    if(!$url->isRouted()) {
      $form_state->setErrorByName('link', t('The link must be a valid internal link.'));
      return;
    }
    // Convert the relative internal URL to an internal path
    $form_state->getValue("link")[0]["uri"] = "entity:" . $url->getInternalPath();
  }

  $node_id = $url->getRouteParameters()["node"];  
  $link_tree_service = \Drupal::service('menu.link_tree');
  // [ "menu_link_content:UUID" => MenuLinkTreeElement object]
  $menu_tree = $link_tree_service->load("group_menu_link_content-" . $group_content_menu->id(), new \Drupal\Core\Menu\MenuTreeParameters());

  // Get a flattened array of all nodes in the menu
  $nodes_in_menu = [];
  foreach($menu_tree as $key => $menu_link_tree_element) {
    _get_node_ids($menu_link_tree_element, $nodes_in_menu);
  }

  $menu_link_content = $form_state->getformObject()->getEntity();
  if(array_key_exists($node_id, $nodes_in_menu)) {
    if( ($menu_link_content->isNew() && $nodes_in_menu[$node_id] !== null)|| 
    ( !$menu_link_content->isNew() && $menu_link_content->id() !== $nodes_in_menu[$node_id]["id"] ) ) {
      // Prepare the error message
      $form_state->setErrorByName('link', t('The link has already been used in the menu at <a href="' . $nodes_in_menu[$node_id]["url"] . '">:url</a>.', [':url' => $nodes_in_menu[$node_id]["url"]]));
      return;
    }
  }
}

function _get_node_ids($menu_link_tree_element, &$nodes_in_menu) {
  // The link field is a MenuLinkContent object
  $menu_link_url = $menu_link_tree_element->link->getUrlObject();
  // Only internal links have node ID
  if( !$menu_link_url->isExternal() && $menu_link_url->isRouted()) {
    $nodes_in_menu[$menu_link_url->getRouteParameters()["node"]] = [
      "id" => $menu_link_tree_element->link->getMetaData()["entity_id"],
      "url" => $menu_link_url->toString(),];
  }

  if($menu_link_tree_element->hasChildren) {
    foreach($menu_link_tree_element->subtree as $key => $menu_link_tree_element) {
      $nodes_in_menu []= _get_node_ids($menu_link_tree_element, $nodes_in_menu);
    }
  }
}

/**
 * Implement hook_preprocess_breadcrumb()
 * Append "/edit" to the last breadcrumb link if it's a Page Menu because the default link leads to a blank page.
 */
function employees_preprocess_breadcrumb(&$variables) {
  if( array_key_exists('breadcrumb', $variables) && 
  count($variables['breadcrumb']) >= 3 && 
  preg_match('/\/menu\/\d+$/', $variables['breadcrumb'][2]["url"])) {
    $variables['breadcrumb'][2]["url"] .= "/edit";
  }
}

/**
 * Implement hook_pathauto_pattern_alter()
 * Alter the pattern for Pages that are not in the group's page menu
 */
function employees_pathauto_pattern_alter(\Drupal\pathauto\PathautoPatternInterface $pattern, array $context) {
  if($context["bundle"] === "page") {
    // Try to render the token, if it can't be rendered, it means the node is not in a menu.
    // This is much easier than traversing the menu tree to find the node.
    $menu_path = \Drupal::token()->replace('[node:menu-link]', $context['data']);
    if( $menu_path === "[node:menu-link]") {
      $pattern->setPattern(str_replace('[node:menu-link:parents:join-path]/[node:menu-link]', '[node:title]', $pattern->getPattern()));
    }
  }
}

/**
 * Implement hook_entity_delete()
 */
function employees_entity_delete($entity) {
  // When an entry is deleted from a Page Menu, update the page's URL alias
  _update_alias_for_menu_linked_node($entity);

  // We have aggregated Search API fields that combine entity reference fields from different
  // entity types. When a referenced entity is deleted, we need to remove the reference from
  // all nodes and media that reference the deleted entity so that the aggregated field is updated.
  if ($entity instanceof \Drupal\Taxonomy\Entity\Term && $entity->bundle() == 'tags') {
    // Remove references to deleted tag from all nodes and media
    _remove_deleted_entity_references($entity, "field_tags");
  }  elseif ($entity instanceof Drupal\group\Entity\Group) {
    // Remove references to deleted groups from all nodes and media
    _remove_deleted_entity_references($entity, "field_display_in_group");
  }
}

/**
 * Helper function to update the alias of the node linked to a menu link content
 */
function _update_alias_for_menu_linked_node($menu_link_content) {
  if($menu_link_content->bundle() !== "menu_link_content" || 
  ! str_starts_with($menu_link_content->get('menu_name')->value, 'group_menu_link_content')) return;

  $menu_link_url = $menu_link_content->getUrlObject();
  if(empty($menu_link_url)) return;
  if( !$menu_link_url->isExternal() && $menu_link_url->isRouted()) {
    $route_parameters = $menu_link_url->getRouteParameters();
    if( !array_key_exists("node", $route_parameters) ) return;
    $node_id = $route_parameters["node"];
    if(empty($node_id)) return;
    $node = Drupal\node\Entity\Node::load($node_id);
    if(empty($node)) return;
    $pathauto_generator = \Drupal::service('pathauto.generator');
    $pathauto_generator->updateEntityAlias($node, "update");
  }
}

/**
 * Helper function to remove references to deleted entities
 */
function _remove_deleted_entity_references($entity, $field_name) {
  $eid = is_numeric($entity) ? $entity : $entity->id();
  $entity_types = ['node', 'media'];
  foreach ($entity_types as $entity_type) {
    // Find all nodes or media that reference the deleted entity
    $query = \Drupal::entityQuery($entity_type)
      ->condition($field_name, $eid, 'IN')
      ->accessCheck(FALSE);
    $ids = $query->execute();

    // Load the entities and remove deleted entity references in the provided field
    $entities = \Drupal::entityTypeManager()->getStorage($entity_type)->loadMultiple($ids);
    foreach ($entities as $entity) {
      $entity_references = $entity->get($field_name)->getValue();
      if ($field_name == 'field_display_in_group' && count($entity_references) == 1) {
        // Delete the entity if it was only displayed in the deleted group
        $entity->delete();
      } else {
        // Remove deleted entity references in the provided field
        foreach ($entity_references as $key => $entity_reference) {
          if ($entity_reference['target_id'] == $eid) {
            $entity->get($field_name)->removeItem($key);
            $entity->save();
          }
        }
      }
    }
  }
}
