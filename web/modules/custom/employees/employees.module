<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Mail\MailManagerInterface;
use Drupal\Component\Utility\SafeMarkup;
use Drupal\Component\Utility\Html;
use Drupal\user\Entity\User;
use Drupal\Core\Render\BubbleableMetadata;


/**
 * Implements hook_form_alter()
 */
function employees_form_alter(&$form, &$form_state, $form_id)
{
  // POWR-3694 - disable HTML 5 validation for all forms
  $form['#attributes']['novalidate'] = '';
  // TOOD: remove this once something similar is included in core, or the Drupal community
  // decides how it wants to handle accessible and usable validation.

  // Validate the file field in Document
  if ($form_id === "media_document_add_form" || $form_id === "media_document_edit_form") {
    $form['#validate'][] = '_validate_document';
  }
}

/**
 * Implements hook_query_TAG_alter().
 * Alter user query from "John Doe" into "John.Doe" to support autocomplete.
 */
function employees_query_entity_query_user_alter(Drupal\Core\Database\Query\AlterableInterface $query)
{
  $selection_handler = $query->getMetaData('entity_reference_selection_handler');
  if ($selection_handler != null && $selection_handler->getPluginId() == "default:user") {
    $conditions = $query->conditions();
    if (empty($conditions)) return;
    foreach ($conditions as $key => $condition) {
      if (!is_array($condition)) continue;
      if (!array_key_exists('field', $condition)) continue;
      if ($condition['field'] != "users_field_data.name") continue;
      $value_orig = $condition['value'];
      if (!is_string($value_orig)) continue;

      // Replace the first blank space with "."
      $pos = strpos($value_orig, ' ');
      if ($pos !== false) {
        $query->conditions()[$key]['value'] = substr_replace($value_orig, '.', $pos, strlen(' '));
      }
    }
  }
}

/**
 * Implements hook_user_format_name_alter().
 */
function employees_user_format_name_alter(&$name, $account)
{
  // Load the full user account.
  $user = User::load($account->id());
  // When the account is deleted, $user could be null.
  if ($user == null) return;
  $full_name = $user->get('field_first_name')->value . ' ' . $user->get('field_last_name')->value;
  // Fall back to account name if first name and last name are empty
  if ($full_name !== ' ') {
    $name = $full_name;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function employees_form_openid_connect_login_form_alter(&$form, &$form_state)
{
  // Override the default label of the submit button
  $form["openid_connect_client_windows_aad_login"]["#value"] = t('Log in with City of Portland network account');
}

/**
 * Implements hook_entity_insert().
 */
function employees_entity_insert($entity)
{
  _notify_reviewer($entity, 'created');
  _notify_group_admin_for_group_change($entity);
}

/**
 * Implements hook_entity_update().
 */
function employees_entity_update($entity)
{
  _notify_reviewer($entity, 'updated');
  _notify_group_admin_for_group_change($entity);
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function employees_user_presave($entity)
{
  $is_publisher = in_array('publisher', $entity->getRoles());
  if($entity->isNew() && $is_publisher) {
    // Record the date time
    $now = new Drupal\Core\Datetime\DrupalDateTime('now', 'UTC');
    $entity->field_publisher_role_changed = $now->format('Y-m-d\TH:i:s');
  }
  else if ($entity->original != null){
    // Check if the user's publisher role changed
    $was_publisher_before_update = in_array('publisher', $entity->original->getRoles());
    if( ($was_publisher_before_update != $is_publisher) || // Publisher role changed
        // Was Publisher AND Status was changed in this update
       ($was_publisher_before_update && ($entity->status->value != $entity->original->status->value))) {
      // Record the date time
      $now = new Drupal\Core\Datetime\DrupalDateTime('now', 'UTC');
      $entity->field_publisher_role_changed = $now->format('Y-m-d\TH:i:s');
    }
  }
}

/**
 * Implements hook_mail().
 */
function employees_mail($key, &$message, $params)
{
  $options = array(
    'langcode' => $message['langcode'],
  );
  switch ($key) {
    case 'employees_daily_mail':
    case 'employees_notify_reviewers':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = t('@title', array('@title' => $params['title']), $options);
      $message['body'][] = $params['message'];
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
      break;
  }
}

/**
 * Implements hook_mail_alter().
 */
function employees_mail_alter(&$message)
{
  // id = module + key
  if ($message['id'] == "employees_employees_notify_reviewers") {
    // Make the email appear to be from the current Editor
    $user = \Drupal::currentUser()->getAccount();
    $user_name = $user->name;
    $user_email = $user->getEmail();
    $message['headers']['Reply-To'] = "\"$user_name\" <$user_email>";
  }
}

/**
 * Helper function to notify reviewers on content updates
 *
 * @param $entity
 *   The entity being created, updated, or deleted
 * @param $entity_event_type
 *   "created", "updated", or "deleted"
 */
function _notify_reviewer($entity, $entity_event_type)
{
  // Only notify on nodes that has Moderation State and has the Reviewer field
  if (
    $entity->getEntityTypeId() != 'node' ||
    !$entity->hasField('moderation_state') ||
    !$entity->hasField('field_reviewer')
  ) {
    return;
  }
  $node = $entity;
  $status_message = $entity_event_type;

  // Group module would save the node twice when creating a new node.
  // We only want to send out email once.
  if ($entity->hasField('field_display_groups') && $node->field_display_groups->count() > 0) {
    $vids = \Drupal::entityTypeManager()->getStorage('node')->revisionIds($node);
    if (count($vids) ==  1 && $entity_event_type == 'created') {
      return;
    }
    if (count($vids) ==  2 && $entity_event_type == 'updated') {
      $status_message = 'created';
    }
  }

  $reviewers = null;
  $latest_and_previous_revs = _load_latest_revision($node);
  $latest_rev = $latest_and_previous_revs['latest'];
  $reviewers = $node->field_reviewer;

  $revision_log_output = $node->revision_log->value ?
    "<div><h3>Revision log:</h3>\r\n" . $node->revision_log->value . "</div>\r\n<p/>\r\n<div>" : '';

  $moderation_state_message = [
    'review' => 'In review',
    'draft' => 'Draft',
    'unpublished' => 'Unpublished/Archived',
    'published' => 'Published',
  ];

  // send email for any moderation state except draft
  if ($latest_rev->moderation_state->value != 'draft') {
    $key = 'employees_notify_reviewers';
    $params['title'] = 'Employees.portland.gov reviewer update';
    $langcode = \Drupal::currentUser()->getPreferredLangcode();
    $params['message'] = "You have been assigned to review <a href=\"/node/" . $node->id() .
      "/revisions/" . $node->vid->value . "/view\"> " . $latest_rev->label() .
      "</a> . You will be notified of all changes to this content.<p/>" .
      "<a href=\"" . $node->revision_uid->entity->toUrl()->toString() . "\">" . $node->revision_uid->entity->label() .
      "</a> " . $status_message . " a new <strong>" . $moderation_state_message[$latest_rev->moderation_state->value] .
      "</strong> revision at " .
      \Drupal::service('date.formatter')->format($node->changed->value, 'custom', 'l Y/n/j g:i A') .
      ".<p/>" . $revision_log_output;

    if ($reviewers == null) {
      return;
    }
    $current_user_email = \Drupal::currentUser()->getAccount()->getEmail();
    // Send email to all reviewers EXCEPT the author
    $to_emails = [];
    foreach ($reviewers->referencedEntities() as $reviewer) {
      if ($reviewer->id() != $node->revision_uid->entity->id()) {
        $to_emails[] = $reviewer->mail->value;
      }
    }
    if (!empty($to_emails)) _send_email($key, implode(',', $to_emails), $langcode, $params, $current_user_email);
  }
}

/**
 * Helpder function to send email
 */
function _send_email($key, $to, $langcode, $params, $from)
{
  $result = \Drupal::service('plugin.manager.mail')->mail('employees', $key, $to, $langcode, $params, $from, true);
  if ($result['result'] != true) {
    \Drupal::logger('mail-log')->error(t('Error sending to @email.', array('@email' => $to)));
    return false;
  } else {
    // drupal_set_message($message);
    \Drupal::logger('mail-log')->notice(t('Email sent to @email ', array('@email' => $to)));
    return true;
  }
}

/**
 * Helper function to get the latest revision
 */
function _load_latest_revision($node)
{
  $vids = \Drupal::entityTypeManager()->getStorage('node')->revisionIds($node);
  $latest_vid = end($vids);
  $previous_vid = prev($vids);
  return [
    "latest" => \Drupal::entityTypeManager()->getStorage('node')->loadRevision($latest_vid),
    "previous" =>  $previous_vid ? \Drupal::entityTypeManager()->getStorage('node')->loadRevision($previous_vid) : null,
  ];
}

/**
 * Add destination parameter to log in/out URLs.
 * 
 * Implements hook_preprocess_menu__account().
 */
function cloudy2_preprocess_menu__account(array &$variables)
{
  $variables['#cache']['max-age'] = 0;
  $destination = \Drupal::request()->getRequestUri();

  if (isset($variables['items']['user.logout']['url'])) {
    $variables['items']['user.logout']['url']->setRouteParameter("destination", $destination);
  }
}

/**
 * Implements hook_token_info().
 */
function employees_token_info()
{
  $info = [];

  $info['types']['server'] = [
    'name' => t('Server vars'),
    'description' => t('Tokens from _SERVER.'),
  ];

  $info['tokens']['server']['HTTP_REFERER'] = [
    'name' => t('HTTP_REFERER'),
    'description' => t("Referrer header value from _SERVER"),
  ];

  $info['tokens']['server']['HTTP_USER_AGENT'] = [
    'name' => t('HTTP_USER_AGENT'),
    'description' => t("User-agent header value from _SERVER"),
  ];

  return $info;
}

/**
 * Implements hook_tokens().
 */
function employees_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata)
{
  $replacements = [];
  $sanitize = !empty($options['sanitize']);

  // Text format tokens.
  if ($type == 'server') {
    foreach ($tokens as $name => $original) {
      $replacements[$original] = $_SERVER[$name];
      if ($sanitize) {
        $replacements[$original] = filter_xss($replacements[$original]);
      }
    }
  }

  return $replacements;
}

/**
 * A helper function to validate document.
 */
function _validate_document(&$form, \Drupal\Core\Form\FormStateInterface $form_state)
{
  if ($form_state->hasValue('field_efiles_link')) {
    // DO NOT validate when the user clicks on the remove document button.
    // ONLY validate when the entire form is submitted.
    if ($form_state->getTriggeringElement()["#name"] === "field_media_document_0_remove_button") return;

    $efiles_link = $form_state->getValue('field_efiles_link');
    $document = $form_state->getValue('field_media_document');

    if (!empty($efiles_link) && !empty($efiles_link[0]['uri']) && !empty($document) && !empty($document[0]["fids"])) {
      $form_state->setErrorByName('field_media_document', t('Please remove either the Document or the eFiles link.'));
      return;
    }

    // If the eFiles link has value
    if (!empty($efiles_link) && !empty($efiles_link[0]['uri'])) {
      $user_input_file_url = strtolower($efiles_link[0]['uri']);
      $external_file_url = $user_input_file_url;
      // Validate the file URL is an eFiles link
      $efiles_url_regex = '/^https:\/\/efiles.portlandoregon.gov\/(.*)/i';
      if (!preg_match($efiles_url_regex, $external_file_url)) {
        $form_state->setErrorByName('field_efiles_link', t('The eFiles link must start with https://efiles.portlandoregon.gov/.'));
        return;
      }

      // Append "/file/document" if it's missing on an eFiles link in order to retrieve mime type and file size
      if (
        strpos($external_file_url, 'https://efiles.portlandoregon.gov/') === 0 &&
        !(substr_compare($external_file_url, "/file/document", -strlen("/file/document")) === 0)
      ) {
        $external_file_url .= "/file/document";
      }

      // Get eFiles file size and MIME type
      try {
        $headers = get_headers($external_file_url, 1);
      } catch (Exception $e) {
        $form_state->setErrorByName('field_efiles_link', 'Cannot retrieve file size and mimetype from this link.');
        return;
      }
      if (
        !empty($headers) &&
        (substr_compare($headers[0], "200 OK", -strlen("200 OK")) === 0) &&
        array_key_exists('Content-Type', $headers) &&
        array_key_exists('Content-Length', $headers)
      ) {
        $file_size = isset($headers['Content-Length']) ? (int)$headers['Content-Length'] : 0;
        if ($file_size === 0) {
          $form_state->setErrorByName('field_efiles_link', t('The linked file is empty.'));
          return;
        }
        // Content-Type header can be "text/html; charset=utf-8"
        $content_type_array = explode(';', $headers['Content-Type']);
        // If content type is text/HTML, it's not a file
        if (empty($content_type_array) || $content_type_array[0] === "text/html") {
          // Commented this line out to support existing documents that are linked to an eFiles folder
          // $form_state->setErrorByName('field_efiles_link', t('The linked file is an HTML page. Please use External Resource instead.'));
          return;
        }

        $form_state->setValue('field_file_size', [["value" => $file_size]]);
        $form_state->setValue('field_mime_type', [["value" => $content_type_array[0]]]);
      } else {
        // Verify it's a valid eFiles folder
        try {
          $headers = get_headers($user_input_file_url, 1);
        } catch (Exception $e) {
          $form_state->setErrorByName('field_efiles_link', 'Please verify the eFiles link is valid.');
          return;
        }

        // Make sure the response code is 200 and content type is HTML
        if (
          empty($headers) ||
          (substr_compare($headers[0], "200 OK", -strlen("200 OK")) !== 0) ||
          (!array_key_exists('Content-Type', $headers)) ||
          substr($headers['Content-Type'], 0, strlen("text/html")) !== "text/html"
        ) {
          $form_state->setErrorByName('field_efiles_link', t('Please verify the eFiles link is valid.'));
        }
      }
    } else {
      $document = $form_state->getValue('field_media_document');
      // The document field can't be empty when the eFile link is empty
      if (empty($document) || empty($document[0]["fids"])) {
        $form_state->setErrorByName('field_media_document', t('Please upload a file or add an external file link'));
      }
    }
  }
}

/**
 * Implement hook_cron()
 * Retrieve a view and send it to powr@portlandoregon.gov
 */
function employees_cron()
{
  // In each cron run after 12pm, check if we've sent the content update summary email today.
  $hour = (int)(date('G')); // 0 to 23
  if ($hour >= 12) {
    // If an email is already sent today, do not send again
    $last_daily_email_sent = \Drupal::state()->get('portland.last_daily_email_sent');
    if (!empty($last_daily_email_sent) && $last_daily_email_sent === date('m/d/Y')) {
      return;
    }

    $results = '';

    // Define a list of views that will be included in the email
    $views[] = ['view_id' => 'content_updated_recently', 'block_id' => 'block_tables'];  // Tables
    $views[] = ['view_id' => 'content_updated_recently', 'block_id' => 'block_urls'];    // Body text URLs
    $views[] = ['view_id' => 'media_updated_recently', 'block_id' => 'block_videos_updated'];    // Videos
    $views[] = ['view_id' => 'users_updated_recently', 'block_id' => 'block_publishers_updated'];    // Publishers

    foreach ($views as $view) {
      // Get the view by machine id
      $theview = \Drupal\views\Views::getView($view['view_id']);
      // Set the display machine id
      $theview->setDisplay($view['block_id']);
      $theview->preExecute();
      $theview->execute();

      if (count($theview->result)) {
        // Render the view and append to results
        $rendered = $theview->render($view['block_id']);
        $results .= \Drupal::service('renderer')->render($rendered);
      }
    }

    // If all views are empty, do not send the email
    if (!strlen($results)) {
      \Drupal::state()->set('portland.last_daily_email_sent', date('m/d/Y'));
      \Drupal::logger('mail-log')->notice(t('No content updated in the past day.'));
      return;
    }

    // Add environment name to the email subject if it's not Live
    $environment_name = '';
    if(isset($_ENV['PANTHEON_ENVIRONMENT']) && $_ENV['PANTHEON_ENVIRONMENT'] != 'live') {
        $environment_name = ' (' . $_ENV['PANTHEON_ENVIRONMENT'] . ')';
    }

    // Send email
    $key = 'employees_daily_mail'; // Replace with Your key
    $to = 'BTS-eGov@portlandoregon.gov';
    $params['message'] = '<p>These Employees.portland.gov items were updated in the last 24 hours and should
            be reviewed according to the specific instructions below.<p/>' . $results;
    $params['title'] = 'Employees.portland.gov list of content to review' . $environment_name;
    $langcode = \Drupal::currentUser()->getPreferredLangcode();

    $sent_successfully = _send_email($key, $to, $langcode, $params, 'powr@portlandoregon.gov');
    if ($sent_successfully) {
      \Drupal::logger('mail-log')->notice(t('Daily content update summary email sent successfully.'));
      \Drupal::state()->set('portland.last_daily_email_sent', date('m/d/Y'));
    }
  }
}

/**
 * Helper function to notify group admin when editor/admin outside the group added the content 
 * into this group.
 *
 * @param $entity
 *   The entity being created or updated
 * @param $entity_event_type
 *   "created" or "updated"
 */
function _notify_group_admin_for_group_change($entity)
{
  // Only notify on nodes that has Displayed In Group field and the field is NOT empty
  if (
    $entity->getEntityTypeId() != 'node' ||
    !$entity->hasField('field_display_in_group')
    //  || $entity->field_display_in_group->count() === 0
  ) {
    return;
  }
  $node = $entity;

  // Get the author of the latest revision
  $latest_and_previous_revs = _load_latest_revision($node);
  $latest_rev = $latest_and_previous_revs['latest'];
  $previous_rev = $latest_and_previous_revs['previous'];
  if( $latest_rev == null) return;

  //Check if "display_in_group" changed since last revision
  $latest_parent_groups = $latest_rev->get('field_display_in_group')->referencedEntities();
  if( $previous_rev != null ) {
    //Check if "display_in_group" changed since last revision
    $previous_parent_groups = $previous_rev->get('field_display_in_group')->referencedEntities();
    // Do nothing if the display_in group didn't change from the previous revision
    if($latest_parent_groups == $previous_parent_groups) return;
  }

  $revision_author_user_id = $latest_rev->revision_uid->target_id;
  $revision_author = \Drupal\user\Entity\User::load($revision_author_user_id);

  // DO NOT send the notification if the user is a site-wide admin or editor
  $site_roles = $revision_author->getRoles();
  $site_wide_editor_or_admin = [
    "publisher",
    "content_lead",
    "administrator",
  ];
  foreach($site_roles as $site_role) {
    if( in_array($site_role, $site_wide_editor_or_admin) ) return;
  }

  // Rare but possible: there could be duplicated groups
  $latest_parent_groups = array_unique($latest_parent_groups, SORT_REGULAR);

  // For each group in field_display_in_group, check if the revision author is an 
  // admin/editor in that group. If NOT, send a email to the group's admin
  $groups_to_notify = [];
  foreach($latest_parent_groups as $entity_parent_group) {
    // Get the user's group membership
    $membership = $entity_parent_group->getMember($revision_author);
    // The user is NOT in the group
    if( $membership == null ) {
      $groups_to_notify []= $entity_parent_group;
    }
    else {
      $roles = $membership->getRoles();
      if( in_array("employee-editor", array_keys($roles)) ||
          in_array("employee-admin", array_keys($roles))
        ) continue;
      
      // If the user is neither Admin nor Editor, the group should be notified
      $groups_to_notify []= $entity_parent_group;
    }
  }

  if( empty($groups_to_notify) ) return;

  // send email for any moderation state except draft
  $key = 'employees_notify_reviewers';
  $params['title'] = 'Employees.portland.gov content added to your group by non-group members';
  $langcode = \Drupal::currentUser()->getPreferredLangcode();
  $revision_log_output = $node->revision_log->value ?
    "<div><h3>Revision log:</h3>\r\n" . $node->revision_log->value . "</div>\r\n<p/>\r\n<div>" : '';

  foreach($groups_to_notify as $group_to_notify) {
    $params['message'] = "As the group admin for <a href=\"/group/" . $group_to_notify->id() .
    "\"> " . $group_to_notify->label() . "</a>, you are being notified that <a href=\"" . $node->revision_uid->entity->toUrl()->toString() . "\">" . $node->revision_uid->entity->label() .
    "</a> has added <a href=\"/node/" . $node->id() .
      "/revisions/" . $node->vid->value . "/view\"> " . $latest_rev->label() .
      "</a> to <a href=\"/group/" . $group_to_notify->id() .
      "\"> " . $group_to_notify->label() . "</a> at " .
      \Drupal::service('date.formatter')->format($node->changed->value, 'custom', 'l Y/n/j g:i A') .
      ".<p/>" . $revision_log_output;

    $current_user_email = \Drupal::currentUser()->getAccount()->getEmail();
    // Send email to all group admins
    $group_to_notify_admins = $group_to_notify->getMembers(['employee-admin']);
    $to_emails = [];
    foreach ($group_to_notify_admins as $group_to_notify_admin) {
      $to_emails[] = $group_to_notify_admin->getUser()->mail->value;
    }
    if (!empty($to_emails)) _send_email($key, implode(',', $to_emails), $langcode, $params, $current_user_email);
  }
}

/**
 * Implement hook_preprocess_HOOK(&$variables) 
 */
function employees_preprocess_fieldset(&$variables) {
  // If the fieldset ID matches certain string and the Description is not empty, move 
  // description into prefix so it will be displayed right below the fieldset title.
  // See web/core/themes/claro/templates/fieldset.html.twig
  if( 
    // Find your fieldset ID in the <fieldset id="ID_HERE" ...> tag.
    // Comment out this line below if you want to target all Fieldsets
    array_key_exists('id', $variables["attributes"]) &&
    $variables["attributes"]["id"] == "group-user-profile" &&
    !empty($variables['description']) && 
    !empty($variables['description']["content"])
  ) {
    $variables['prefix'] = $variables['description']["content"];
    unset($variables['description']);
  }
}


/**
 * Implement hook_preprocess_HOOK(&$variables) 
 * Hide user email field if email starts with "no.email"
 */
function employees_preprocess_block(&$variables) {
  if($variables["plugin_id"] == "field_block:user:user:mail" &&
    substr($variables["content"][0]["#title"], 0, 8) == "no.email" ) {
    $variables["content"] = [];
  }
}

/**
 * Implements hook_pathauto_pattern_alter().
 */
function employees_pathauto_alias_alter(&$alias, array &$context) {
  if($context['module'] == "user") {
    $user = $context['data']['user'];
    $first_name = trim($user->field_first_name->value);
    $last_name = trim($user->field_last_name->value);

    // Do nothing if the user has both first name and last name
    if( !empty($first_name) && !empty($last_name ) ) return;

    // If there is no last AND first name, use account name
    if( empty($first_name) && empty($last_name ) ) {
      $alias_cleaner = \Drupal::service("pathauto.alias_cleaner");
      $alias = '/' . $alias_cleaner->cleanString($user->name->value);
      return;
    }

    // Either first name or last name is empty
    if( empty($first_name) ) {
      $alias = str_replace('/.', '/', $alias);
    }
    if( empty($last_name) ) {
      $alias = rtrim($alias, '.');
    }
  }
}
