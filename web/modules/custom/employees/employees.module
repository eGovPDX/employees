<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Mail\MailManagerInterface;
use Drupal\Component\Utility\SafeMarkup;
use Drupal\Component\Utility\Html;
use Drupal\user\Entity\User;

/**
 * Implements hook_query_TAG_alter().
 * Alter user query from "John Doe" into "John.Doe" to support autocomplete.
 */
function employees_query_entity_query_user_alter(Drupal\Core\Database\Query\AlterableInterface $query) {
    $selection_handler = $query->getMetaData('entity_reference_selection_handler');
    if($selection_handler != null && $selection_handler->getPluginId() == "default:user") {
        $conditions = $query->conditions();
        if( empty($conditions)) return;
        foreach($conditions as $key=>$condition) {
            if($condition['field'] != "users_field_data.name") continue;
            $value_orig = $condition['value'];
            if( !is_string($value_orig) ) continue;

            // Replace the first blank space with "."
            $pos = strpos($value_orig, ' ');
            if ($pos !== false) {
                $query->conditions()[$key]['value'] = substr_replace($value_orig, '.', $pos, strlen(' '));
            }
        }
    }
}

/**
 * Implements hook_user_format_name_alter().
 */
function employees_user_format_name_alter(&$name, $account) {
  // Load the full user account.
  $user = User::load($account->id());
  // When the account is deleted, $user could be null.
  if( $user == null ) return;
  $full_name = $user->get('field_first_name')->value . ' ' . $user->get('field_last_name')->value;
  // Fall back to account name if first name and last name are empty
  if ($full_name !== ' ') {
    $name = $full_name;
  }
}

/**
 * Implements hook_entity_insert().
 */
function employees_entity_insert($entity)
{
    _notify_reviewer($entity, 'created');
}

/**
 * Implements hook_entity_update().
 */
function employees_entity_update($entity)
{
    _notify_reviewer($entity, 'updated');
}

/**
 * Implements hook_mail().
 */
function employees_mail($key, &$message, $params)
{
    $options = array(
        'langcode' => $message['langcode'],
    );
    switch ($key) {
        case 'employees_daily_mail':
        case 'employees_notify_reviewers':
            $message['from'] = \Drupal::config('system.site')->get('mail');
            $message['subject'] = t('@title', array('@title' => $params['title']), $options);
            $message['body'][] = $params['message'];
            $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
            break;
    }
}

/**
 * Implements hook_mail_alter().
 */
function employees_mail_alter(&$message)
{
    // id = module + key
    if ($message['id'] == "employees_employees_notify_reviewers") {
        // Make the email appear to be from the current Editor
        $user = \Drupal::currentUser()->getAccount();
        $user_name = $user->name;
        $user_email = $user->getEmail();
        $message['headers']['Reply-To'] = "\"$user_name\" <$user_email>";
    }
}

/**
 * Helper function to notify reviewers on content updates
 *
 * @param $entity
 *   The entity being created, updated, or deleted
 * @param $entity_event_type
 *   "created", "updated", or "deleted"
 */
function _notify_reviewer($entity, $entity_event_type)
{
    // Only notify on nodes that has Moderation State and has the Reviewer field
    if ($entity->getEntityTypeId() != 'node' ||
        !$entity->hasField('moderation_state') ||
        !$entity->hasField('field_reviewer')) {
        return;
    }
    $node = $entity;
    $status_message = $entity_event_type;

    // Group module would save the node twice when creating a new node.
    // We only want to send out email once.
    if ($entity->hasField('field_display_groups') && $node->field_display_groups->count() > 0) {
        $vids = \Drupal::entityTypeManager()->getStorage('node')->revisionIds($node);
        if (count($vids) ==  1 && $entity_event_type == 'created') {
            return;
        }
        if (count($vids) ==  2 && $entity_event_type == 'updated') {
            $status_message = 'created';
        }
    }

    $reviewers = null;
    $latest_and_previous_revs = _load_latest_revision($node);
    $latest_rev = $latest_and_previous_revs['latest'];
    $reviewers = $node->field_reviewer;

    $revision_log_output = $node->revision_log->value ?
        "<div><h3>Revision log:</h3>\r\n".$node->revision_log->value."</div>\r\n<p/>\r\n<div>" : '';

    $moderation_state_message = [
        'review' => 'In review',
        'draft' => 'Draft',
        'archived' => 'Unpublished/Archived',
        'published' => 'Published',
    ];

    // send email for any moderation state except draft
    if ($latest_rev->moderation_state->value != 'draft') {
        $key = 'employees_notify_reviewers';
        $params['title'] = 'Employees.portland.gov reviewer update';
        $langcode = \Drupal::currentUser()->getPreferredLangcode();
        $params['message'] = "You have been assigned to review <a href=\"/node/".$node->id().
            "/revisions/".$node->vid->value."/view\"> ".$latest_rev->label().
            "</a> . You will be notified of all changes to this content.<p/>".
            "<a href=\"".$node->revision_uid->entity->url()."\">".$node->revision_uid->entity->label().
            "</a> ".$status_message." a new <strong>".$moderation_state_message[$latest_rev->moderation_state->value].
            "</strong> revision at ".
            \Drupal::service('date.formatter')->format($node->changed->value, 'custom', 'l Y/n/j g:i A').
            ".<p/>".$revision_log_output;

        if ($reviewers == null) {
            return;
        }
        $current_user_email = \Drupal::currentUser()->getAccount()->getEmail();
        // Send email to all reviewers EXCEPT the author
        $to_emails = [];
        foreach ($reviewers->referencedEntities() as $reviewer) {
            if ($reviewer->id() != $node->revision_uid->entity->id()) {
                $to_emails[] = $reviewer->mail->value;
            }
        }
        if( !empty($to_emails)) _send_email($key, implode(',', $to_emails), $langcode, $params, $current_user_email);
    }
}

/**
 * Helpder function to send email
 */
function _send_email($key, $to, $langcode, $params, $from)
{
    $result = $mailManager = \Drupal::service('plugin.manager.mail')->
        mail('employees', $key, $to, $langcode, $params, $from, true);
    if ($result['result'] != true) {
        \Drupal::logger('mail-log')->error(t('Error sending to @email.', array('@email' => $to)));
    } else {
        // drupal_set_message($message);
        \Drupal::logger('mail-log')->notice(t('Email sent to @email ', array('@email' => $to)));
    }
}

/**
 * Helper function to get the latest revision
 */
function _load_latest_revision($node)
{
    $vids = \Drupal::entityTypeManager()->getStorage('node')->revisionIds($node);
    $latest_vid = end($vids);
    $previous_vid = prev($vids);
    return [
        "latest" => \Drupal::entityTypeManager()->getStorage('node')->loadRevision($latest_vid),
        "previous" =>  $previous_vid ? \Drupal::entityTypeManager()->getStorage('node')->loadRevision($previous_vid) : null,
    ];
}
