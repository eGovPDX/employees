<?php

use Drupal\user\Entity\User;
use Drupal\Core\Language\LanguageInterface;
use GuzzleHttp\Exception\RequestException;

/**
 * Implements hook_form_FORM_ID_alter().
 */
// function portland_openid_connect_form_openid_connect_login_form_alter(&$form, &$form_state)
// {
//   // Override the default label of the submit button
//   $form["openid_connect_client_windows_aad_login"]["#value"] = t('Log in with City of Portland network account');
// }

/**
 * Implement hook_cron()
 * Retrieve a view and send it to powr@portlandoregon.gov
 */
function portland_openid_connect_cron()
{    
  // TEST ONLY: run cron job on the test multidev
  $should_run_user_sync = isset($_ENV['PANTHEON_ENVIRONMENT']) &&
    in_array($_ENV['PANTHEON_ENVIRONMENT'], ['powr-2428', 'lando']);
  if( ! $should_run_user_sync ){
    return;
  }

  // When Cron got into a locked state, you will see the log "Attempting to re-run cron while it is already running.".
  // Run this command:
  // lando drush sqlq "DELETE FROM semaphore WHERE name = 'cron';"

  // Call Microsoft Graph API to retrieve user info
  $tokens = _get_access_token();
  if(empty($tokens['access_token'])) {
    \Drupal::logger('portland OpenID')->notice("Cannot retrieve access token for Microsoft Graph. Make sure the client secret is correct.");
    return;
  }

  _get_all_users($tokens['access_token']);
}

/**
 * Parse the response from Microsoft Graph API to add users.
 * https://docs.microsoft.com/en-us/graph/delta-query-users
 */
function _process_users($response_data) {
  $user_data_array = $response_data['value']; // array of users
  if(empty($user_data_array)) return;

  $count_user_created = 0;
  $count_user_updated = 0;
  $count_user_deleted = 0;

  foreach($user_data_array as $user_data) {
    // Skip accounts without first name, last name, or email. These are not people acount.
    if(empty($user_data['givenName']) || 
      empty($user_data['surname']) || 
      empty($user_data['mail']))
      continue;

    // Check if this user is already in the system

    // Some users are added into the system before the batch import. We must 
    // look up using email first.
    $users = \Drupal::entityTypeManager()
      ->getStorage('user')
      ->loadByProperties(['mail' => $user_data['mail']]);

    // If found no user with email, use AD ID to look up again.
    // These are stub users created for managers
    if(count($users) == 0) {
      $users = \Drupal::entityTypeManager()
        ->getStorage('user')
        ->loadByProperties(['field_active_directory_id' => $user_data['id']]);
    }

    if(count($users) == 0) {
      /*
        {
            "displayName": "Paton, Heather",
            "givenName": "Heather",
            "mail": "Heather.Paton@portlandoregon.gov",
            "surname": "Paton",
            "userPrincipalName": "Heather.Paton@portlandoregon.gov",
            "id": "1dfb6f12-f5c2-4c30-b87c-5532ce6788f2",
            "manager@delta": [
                {
                    "@odata.type": "#microsoft.graph.user",
                    "id": "c95995ed-515b-41fc-a318-93cf66f52f1f"
                }
            ]
        }
      */

      // Handle manager data
      $manager_user_ids = [];
      if(array_key_exists('manager@delta', $user_data)) {
        // Create a temp user with the manager's AD ID
        $manager_array = $user_data['manager@delta'];
        if(count($manager_array) > 0) {
          foreach($manager_array as $manager_data) {
            if(array_key_exists('@odata.type', $manager_data) && 
              $manager_data['@odata.type'] == "#microsoft.graph.user") {
                $manager_ad_id = $manager_data['id'];


                $manager_users = \Drupal::entityTypeManager()
                ->getStorage('user')
                ->loadByProperties(['field_active_directory_id' => $manager_ad_id]);

                if(count($manager_users) > 0) {
                  $manager_user_ids[] = key($manager_users); // User ID is the first key
                  // \Drupal::logger('portland OpenID')->notice('Found existing manager: ' . $manager_ad_id);
                }
                else {
                  $user = User::create([
                    'name' => $manager_ad_id, // temp name
                    'mail' => $manager_ad_id.'@portlandoregon.gov', // temp email
                    'pass' => user_password(), // temp password
                    'status' => 1,
                    'field_active_directory_id' => $manager_ad_id,
                  ]);
          
                  $user->save();
                  $manager_user_ids[] = $user->id();
                  // \Drupal::logger('portland OpenID')->notice('Created temp manager: ' . $manager_ad_id);

                }
              }
          }
        }
      }

      // Create a new user
      $user = User::create([
        // Some users have the same first and last name. But email is always unique.
        'name' => $user_data['mail'], //$user_data['givenName'] . ' ' . $user_data['surname'],
        'mail' => $user_data['mail'],
        'pass' => user_password(), // Create a temp password
        'status' => 1,
        'field_active_directory_id' => $user_data['id'],
        'field_first_name' => $user_data['givenName'],
        'field_last_name' => $user_data['surname'],
      ]);

      foreach($manager_user_ids as $manager_user_id) {
        $user->field_managers[] = $manager_user_id;
      }

      $user->save();
      $count_user_created++;
      // \Drupal::logger('portland OpenID')->notice('User added: ' . $user_data['givenName'] . ' ' . $user_data['surname']);

    }
    else {
      $user = array_values($users)[0];
      // Delete this user
      if(array_key_exists('@removed', $user_data)) {
        \Drupal::logger('portland OpenID')->notice('User deleted: ' . $user->mail->value);
        $user->delete();
        $count_user_deleted++;
      }
      // Update this user
      else {
        // $user->set('name', $user_data['id']);
        $user->set('mail', $user_data['mail']);
        $user->set('field_first_name', $user_data['givenName']);
        $user->set('field_last_name', $user_data['surname']);
        $user->save();
        $count_user_updated++;
        // \Drupal::logger('portland OpenID')->notice('User updated: ' . $user_data['mail'] );
      }
    }
  }

  // Log the changes made in this batch
  $log_message = 'Retrieved ' . count($user_data_array) . ' users. ';
  if($count_user_created != 0) {
    $log_message .= " Created $count_user_created.";
  }
  if($count_user_updated != 0) {
    $log_message .= " Updated $count_user_updated.";
  }
  if($count_user_deleted != 0) {
    $log_message .= " Deleted $count_user_deleted.";
  }
  \Drupal::logger('portland OpenID')->notice($log_message);
}

/**
 * Use the access token to get user info
 */
function _get_all_users($access_token) {
  $system_state = \Drupal::state();

  /* @var \GuzzleHttp\ClientInterface $client */
  $client = new \GuzzleHttp\Client();
  // Perform the request.
  $options = [
    'method' => 'GET',
    'headers' => [
      'Content-Type' => 'application/json',
      'Authorization' => 'Bearer ' . $access_token,
    ],
  ];

  try { 
    // $system_state->delete('resumeLink');

    if( $resumeLink = $system_state->get('resumeLink') ) {
      \Drupal::logger('portland OpenID')->notice('Resume retrieving user information ...');
    }
    else {
      \Drupal::logger('portland OpenID')->notice('Start retrieving user information ...');
    }

    // If there is a resume link, use it. Otherwise start fresh
    $request_url = (empty($resumeLink)) ? 'https://graph.microsoft.com/v1.0/users/delta' : $resumeLink;
    $response = $client->get($request_url, $options);
    // Response data schema at https://docs.microsoft.com/en-us/graph/delta-query-users
    $response_data = json_decode((string) $response->getBody(), TRUE);
    _process_users($response_data);

    // Loop until there is no nextLink or reaching the preset limit.
    // Making too many request at once will cause Cron to time out.
    $next_request_url = $response_data['@odata.nextLink'];
    $request_limit = 5;
    $request_count = 0;
    while($next_request_url != null && $request_count < $request_limit) {
      $response = $client->get($next_request_url, $options);
      $response_data = json_decode((string) $response->getBody(), TRUE);
      $next_request_url = $response_data['@odata.nextLink'];
      _process_users($response_data);
      $request_count++;
    }

    if($next_request_url == null) {
      $system_state->set('resumeLink', $response_data['@odata.deltaLink']);
      \Drupal::logger('portland OpenID')->notice('Finished retrieving all user information.');
    }
    else {
      $system_state->set('resumeLink', $response_data['@odata.nextLink']);
      \Drupal::logger('portland OpenID')->notice('More user information to be retrieved by the next cron job.');
    }

    return true;
  }
  catch (RequestException $e) {
    $variables = [
      '@message' => 'Could not retrieve user information',
      '@error_message' => $e->getMessage(),
    ];
    \Drupal::logger('portland OpenID')->error('@message. Details: @error_message', $variables);
    return false;
  }
}

/**
 * Call Microsoft Azure AD OAuth API to retrieve the access token.
 * Need a fresh token for each CRON job run.
 */
function _get_access_token() {
  $windows_aad_config = \Drupal::config('openid_connect.settings.windows_aad');
  $client_id = $windows_aad_config->get('settings.client_id');
  $tenant_id = '636d7808-73c9-41a7-97aa-8c4733642141';

  $request_options = [
    'form_params' => [
      // 'code' => $authorization_code,
      'client_id' => $client_id,
      'client_secret' => $windows_aad_config->get('settings.client_secret'),
      'grant_type' => 'client_credentials',
      'scope' => 'https://graph.microsoft.com/.default',
    ],
  ];

  /* @var \GuzzleHttp\ClientInterface $client */
  $client = new \GuzzleHttp\Client();

  try {
    $response = $client->post("https://login.microsoftonline.com/$tenant_id/oauth2/v2.0/token", $request_options);
    $response_data = json_decode((string) $response->getBody(), TRUE);

    // Expected result.
    $tokens = [
      // 'id_token' => $response_data['id_token'],
      'access_token' => $response_data['access_token'],
    ];
    if (array_key_exists('expires_in', $response_data)) {
      $tokens['expire'] = \Drupal::time()->getRequestTime() + $response_data['expires_in'];
    }
    return $tokens;
  }
  catch (RequestException $e) {
    $variables = [
      '@message' => 'Could not retrieve tokens',
      '@error_message' => $e->getMessage(),
    ];
    \Drupal::logger('portland OpenID')->error('@message. Details: @error_message', $variables);
    return FALSE;
  }
}
