<?php

use Drupal\group\Entity\Group;
use Drupal\Core\Cache\Cache;
use GuzzleHttp\Client;
use Drupal\user\Entity\User;
use Drupal\user\UserInterface;
use GuzzleHttp\Exception\RequestException;
use Drupal\portland_openid_connect\Util\PortlandOpenIdConnectUtil;

/**
 * Implement hook_user_presave()
 * Keep the field_primary_groups value in sync with field_group_names
 */
function portland_openid_connect_user_presave($account)
{
  PortlandOpenIdConnectUtil::updatePrimaryGroupFieldForUser($account);
}

/**
 * Implement hook_user_create()
 */
function portland_openid_connect_user_insert($account)
{
  // Do nothing if it's a new user and is Contact Only
  if($account->field_is_contact_only->value == 1) return;
  PortlandOpenIdConnectUtil::updatePrimaryGroupMembershipForUser($account);
}

/**
 * Implement hook_user_update()
 * If a user is Contact Only, remove the user from all groups
 * If not, add the user to all her primary groups.
 */
function portland_openid_connect_user_update($account)
{
  // Remove "contact only" users from all groups
  if($account->field_is_contact_only->value == 1) {
    $current_primary_group_ids = PortlandOpenIdConnectUtil::getGroupIdsOfUser($account);
    foreach ($current_primary_group_ids as $current_primary_group_id) {
      $group = Group::load($current_primary_group_id);
      $group->removeMember($account);
      $group->save();
      Cache::invalidateTags($group->getCacheTagsToInvalidate());
    }
  }
  else {
    PortlandOpenIdConnectUtil::updatePrimaryGroupMembershipForUser($account);
  }
}

/**
 * Implement hook_cron()
 * 
 * When Cron got into a locked state, you will see the log "Attempting to re-run cron while it is already running.".
 * Run this command:
 *    drush sqlq "DELETE FROM semaphore WHERE name = 'cron';"
 * Get state values: 
 *    drush state:get epgov.user_sync.stop
 *    drush state:get epgov.user_sync.day_of_week
 *    drush state:get epgov.user_sync.sync_now
 *    drush state:get epgov.user_sync.batch_size
 *    drush state:get epgov.user_sync.last_sync_date.DOMAIN
 *    drush state:get epgov.user_sync.last_check_removals_date.DOMAIN
 *    drush state:get epgov.user_sync.resume_url.DOMAIN
 *    drush state:get epgov.user_sync.drupal_user_offset.DOMAIN
 * To start sync from a fresh state:
 *    drush employees:reset_user_sync
 */
function portland_openid_connect_cron()
{
  // To stop user sync: drush state:set epgov.user_sync.stop true
  // To restart user sync: drush state:delete epgov.user_sync.stop
  $stop_user_sync = \Drupal::state()->get('epgov.user_sync.stop');
  if (!empty($stop_user_sync) && strtolower($stop_user_sync) === "true") {
    \Drupal::logger('portland OpenID')->notice("epgov.user_sync.stop set to TRUE. Skip user sync.");
    return;
  }

  // Check if we need to sync now
  $sync_now = (strtolower(\Drupal::state()->get('epgov.user_sync.sync_now')) === "true");

  // Get the day of the week to sync. Default is Saturday.
  if( !$sync_now ) {
    $sync_day = \Drupal::state()->get('epgov.user_sync.day_of_week') ?? "Saturday";
    if(strtolower(date("l")) !== strtolower($sync_day) ) return;
  }

  // Domains should be defined as constants in PortlandOpenIdConnectUtil
  $domains = [
    PortlandOpenIdConnectUtil::ROSE_DOMAIN_NAME => false,
    PortlandOpenIdConnectUtil::PTLD_DOMAIN_NAME => false,
  ];
  foreach($domains as $domain => $done) {
    // Get the last sync date. Default to 10/01/2024.
    $last_user_sync_date = \Drupal::state()->get("epgov.user_sync.last_sync_date.$domain");
    $last_user_sync_date = empty($last_user_sync_date) ? (new DateTime("2024-10-01")) : new DateTime($last_user_sync_date);
    $last_check_removals_date = \Drupal::state()->get("epgov.user_sync.last_check_removals_date.$domain");
    $last_check_removals_date = empty($last_check_removals_date) ? (new DateTime("2024-10-01")) : new DateTime($last_check_removals_date);

    // Do nothing if the last sync was done within 7 days
    $now = new DateTime();
    $skip_user_sync = ($now->diff($last_user_sync_date)->days < 7);
    $skip_user_removal_check = ($now->diff($last_check_removals_date)->days < 7);
    if($skip_user_sync && $skip_user_removal_check) {
      $domains[$domain] = true;
      continue;
    }

    $tokens = PortlandOpenIdConnectUtil::GetAccessToken($domain);
    if (empty($tokens) || empty($tokens['access_token'])) {
      \Drupal::logger('portland OpenID')->error("Cannot retrieve access token for Microsoft Graph for domain $domain. Make sure the client credentials are correct and not expired.");
      return;
    }

    if( !$skip_user_sync ) _get_all_users($tokens['access_token'], $domain);
    if( !$skip_user_removal_check ) _update_users_removed_from_ad($tokens['access_token'], $domain);
  }

  // When all domains are done, clear the sync_now flag
  $all_domains_done = true;
  foreach($domains as $domain => $done) {
    $all_domains_done &= $done;
  }
  if($all_domains_done) \Drupal::state()->delete("epgov.user_sync.sync_now");
}

/**
 * Check if Drupal users have been removed from EntraID
 */
function _update_users_removed_from_ad($access_token, $domain)
{
  $drupal_user_offset = \Drupal::state()->get("epgov.user_sync.drupal_user_offset.$domain") ?? 0;
  $drupal_user_limit = 100;

  if ($drupal_user_offset == 0) {
    \Drupal::logger('portland OpenID')->notice("Started checking for users removed in $domain");
  }

  // Get 100 enabled users at a time and add the array into the queue
  $userStorage = \Drupal::entityTypeManager()->getStorage('user');
  $query = $userStorage->getQuery();
  $email_domain_condition_group = $query->orConditionGroup()
    ->condition('mail', "@".$domain, 'ENDS_WITH')
    ->condition('mail', PortlandOpenIdConnectUtil::PROSPER_PORTLAND_EMAIL_SUFFIX, 'ENDS_WITH');
  $uids = $query
    ->condition('status', '1') // Enabled users
    ->condition($email_domain_condition_group)
    ->sort('uid', 'ASC')
    ->range($drupal_user_offset, $drupal_user_limit)
    ->accessCheck(FALSE)
    ->execute();

  if (count($uids) > 0) {
    $users = $userStorage->loadMultiple($uids);
    /** @var QueueFactory $queue_factory */
    $queue_factory = \Drupal::service('queue');
    /** @var QueueInterface $queue */
    $queue = $queue_factory->get('user_sync');
    $queue->createItem([
      "access_token" => $access_token,
      "domain" => $domain,
      "user_type" => "drupal",
      "users" => $users
    ]);
  }

  // Update the user offset
  \Drupal::state()->set("epgov.user_sync.drupal_user_offset.$domain", $drupal_user_offset + count($uids));
  // Done when the returned user count is less than the limit
  if (count($uids) < $drupal_user_limit) {
    \Drupal::logger('portland OpenID')->notice("Finished checking for users removed in $domain");
    \Drupal::state()->set("epgov.user_sync.drupal_user_offset.$domain", 0);
    \Drupal::state()->set("epgov.user_sync.last_check_removals_date.$domain", (new DateTime())->format('Y-m-d'));
    return;
  }
}

/**
 * Call the list users API to get all users from EntraID
 */
function _get_all_users($access_token, $domain = PortlandOpenIdConnectUtil::ROSE_DOMAIN_NAME)
{
  $system_state = \Drupal::state();

  /* @var \GuzzleHttp\ClientInterface $client */
  $client = new Client();
  // Perform the request.
  $options = [
    'method' => 'GET',
    'headers' => [
      'Content-Type' => 'application/json',
      'Authorization' => 'Bearer ' . $access_token,
      'ConsistencyLevel' => 'eventual',
    ]
  ];

  try {
    // Run this command to delete the resume link in order to start fresh
    // lando drush state:del epgov.user_sync.resume_url.DOMAIN

    if ($resume_url = $system_state->get("epgov.user_sync.resume_url.$domain")) {
      \Drupal::logger('portland OpenID')->notice("Resuming user sync for $domain");
    } else {
      \Drupal::logger('portland OpenID')->notice("Starting user sync for $domain");
    }

    // Get the user sync batch size. Default is 50 users
    $batch_size = $system_state->get('epgov.user_sync.batch_size') ?? "50";

    // If there is a resume link, use it. Otherwise start fresh
    // The hardcoded initial URL is intentional. It's only used for the first request.
    $prosper_portland_suffix = PortlandOpenIdConnectUtil::PROSPER_PORTLAND_EMAIL_SUFFIX;
    $request_url = empty($resume_url) ? "https://graph.microsoft.com/v1.0/users?\$top=$batch_size&\$filter=endswith(mail,'@$domain') or endswith(mail,'$prosper_portland_suffix')&\$orderby=userPrincipalName&\$count=true&\$select=id,accountEnabled,userPrincipalName,displayName,givenName,surname,jobTitle,mail,companyName,department,officeLocation,businessPhones,mobilePhone,employeeId,userType,employeeType,streetAddress,city,state,postalCode,mailNickname" : $resume_url;
    // Queue up 10 items in each call
    $request_limit = 10;
    $request_count = 0;
    $response_data = null;
    while (strlen($request_url) > 0 && $request_count < $request_limit) {
      $response = $client->get($request_url, $options);
      $response_data = json_decode((string) $response->getBody(), TRUE);
      
      /** @var QueueFactory $queue_factory */
      $queue_factory = \Drupal::service('queue');
      /** @var QueueInterface $queue */
      $queue = $queue_factory?->get('user_sync');
      $queue?->createItem([
        "access_token" => $access_token,
        "domain" => $domain,
        "user_type" => "entra_id",
        "users" => $response_data['value']
      ]);

      if( isset($response_data['@odata.nextLink']) ) {
        $request_url = $response_data['@odata.nextLink'] ?? '';
        $request_count++;
      }
      else {
        break;
      }
    }

    // When there is @odata.nextLink, prepare for the next run
    if( isset($response_data['@odata.nextLink']) ) {
      $system_state->set("epgov.user_sync.resume_url.$domain", $response_data['@odata.nextLink']);
      \Drupal::logger('portland OpenID')->info("Updated resume link for $domain.");
    }
    // When there is no @odata.nextLink, there is no more user to sync
    else {
      $system_state->set("epgov.user_sync.last_sync_date.$domain", (new DateTime())->format('Y-m-d'));
      $system_state->set("epgov.user_sync.resume_url.$domain", '');
      \Drupal::logger('portland OpenID')->info("Finished user sync for $domain.");
    }
  } catch (RequestException $e) {
    $variables = [
      '@message' => 'Cannot synchronize users from ' . $domain,
      '@error_message' => $e->getMessage(),
    ];
    \Drupal::logger('portland OpenID')->error('@message. Details: @error_message', $variables);
  }
}
