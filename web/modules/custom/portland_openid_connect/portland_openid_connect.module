<?php

use Drupal\user\Entity\User;
use Drupal\user\UserInterface;
use GuzzleHttp\Exception\RequestException;
use Drupal\portland_openid_connect\Util\PortlandOpenIdConnectUtil;

/**
 * Implement hook_user_login()
 * Update user profile and manager info during login
 */
function portland_openid_connect_user_login(UserInterface $user) {
  if (empty($user)) return;

  if(PortlandOpenIdConnectUtil::ShouldSkipUser($user)) return;

  $domain = (str_ends_with($user->mail->value, PortlandOpenIdConnectUtil::PTLD_DOMAIN_NAME)) ? PortlandOpenIdConnectUtil::PTLD_DOMAIN_NAME : PortlandOpenIdConnectUtil::ROSE_DOMAIN_NAME;

  $tokens = PortlandOpenIdConnectUtil::GetAccessToken($domain);
  if (empty($tokens) || empty($tokens['access_token'])) {
    \Drupal::logger('portland OpenID')->error("Cannot retrieve access token for Microsoft Graph. Make sure the client secret is correct.");
    return;
  }

  // Only enabled users can log in so we don't need to check if the user is enabled
  PortlandOpenIdConnectUtil::GetUserProfile($tokens['access_token'], $user);
  PortlandOpenIdConnectUtil::GetUserManager($tokens['access_token'], $user);
  // POWR-4008 Disable getting user photo from AD to avoid wiping out the badge photo uploaded
  // PortlandOpenIdConnectUtil::GetUserPhoto($tokens['access_token'], $account->getAccountName(), $azure_ad_id);
  $user->save();
}


/**
 * Implement hook_user_presave()
 * Keep the field_primary_groups value in sync with field_group_names
 */
function portland_openid_connect_user_presave($account)
{
  PortlandOpenIdConnectUtil::updatePrimaryGroupFieldForUser($account);
}

/**
 * Implement hook_user_create()
 */
function portland_openid_connect_user_insert($account)
{
  // Do nothing if it's a new user and is Contact Only
  if($account->field_is_contact_only->value == 1) return;
  PortlandOpenIdConnectUtil::updatePrimaryGroupMembershipForUser($account);
}

/**
 * Implement hook_user_update()
 * If a user is Contact Only, remove the user from all groups
 * If not, add the user to all her primary groups.
 */
function portland_openid_connect_user_update($account)
{
  // Remove "contact only" users from all groups
  if($account->field_is_contact_only->value == 1) {
    $current_primary_group_ids = PortlandOpenIdConnectUtil::getGroupIdsOfUser($account);
    foreach ($current_primary_group_ids as $current_primary_group_id) {
      $group = \Drupal\group\Entity\Group::load($current_primary_group_id);
      $group->removeMember($account);
      $group->save();
      \Drupal\Core\Cache\Cache::invalidateTags($group->getCacheTagsToInvalidate());
    }
  }
  else {
    PortlandOpenIdConnectUtil::updatePrimaryGroupMembershipForUser($account);
  }
}

/**
 * Implement hook_cron()
 * 
 * When Cron got into a locked state, you will see the log "Attempting to re-run cron while it is already running.".
 * Run this command: lando drush sqlq "DELETE FROM semaphore WHERE name = 'cron';"
 */
function portland_openid_connect_cron()
{
  // To manually stop user sync:
  // drush state:set portland.stop_user_sync true
  $stop_user_sync = \Drupal::state()->get('portland.stop_user_sync');
  if (!empty($stop_user_sync) && strtolower($stop_user_sync) === "true") {
    \Drupal::logger('portland OpenID')->notice("portland.stop_user_sync set to TRUE. Skip user sync.");
    return;
  }

  // Domains should be defined as constants in PortlandOpenIdConnectUtil
  $domains = [
    PortlandOpenIdConnectUtil::ROSE_DOMAIN_NAME,
    PortlandOpenIdConnectUtil::PTLD_DOMAIN_NAME,
  ];
  foreach($domains as $domain) {
    $tokens = PortlandOpenIdConnectUtil::GetAccessToken($domain);
    if (empty($tokens) || empty($tokens['access_token'])) {
      \Drupal::logger('portland OpenID')->error("Cannot retrieve access token for Microsoft Graph for domain $domain. Make sure the client credentials are correct and not expired.");
      return;
    }
    _get_all_users($tokens['access_token'], $domain);
  }
}

/**
 * Parse the response json from Microsoft Graph API to add/update users.
 * https://docs.microsoft.com/en-us/graph/delta-query-users
 * 
 * @param array $response_data
 *   The decoded JSON response from Microsoft Graph.
 * 
 * A person must have givenName, surname, mail, pincipal name and id
 * {
 *    businessPhones (may be empty)
 *    displayName
 *    givenName
 *    jobTitle (may be empty)
 *    mail
 *    surname (may be empty)
 *    officeLocation (may be empty)
 *    userPrincipalName
 *    id
 *    manager@delta [ (may be empty)
 *      [
 *        id
 *      ]
 *    ]
 * }
 */
function _process_users($response_data, $access_token)
{
  $user_data_array = $response_data['value']; // array of users
  if (empty($user_data_array)) {
    \Drupal::logger('portland OpenID')->notice('No user change since the last sync.');
    return;
  }

  $users_created = [];
  $users_updated = [];
  $users_disabled = [];
  foreach ($user_data_array as $user_data) {
    // Skip accounts without first name, last name, userPrincipalName, or email. These are not people acount.
    if (
      empty($user_data['givenName']) ||
      empty($user_data['surname']) ||
      empty($user_data['mail']) ||
      empty($user_data['userPrincipalName']) ||
      empty($user_data['id']) ||
      str_ends_with($user_data['userPrincipalName'], 'onmicrosoft.com')
    ) {
      continue;
    }

    // Use principal name and email to look up user. After PTLD migration, user's email will remain the same. There are also cases when the user gets a new AD account with the same email address.
    $users = \Drupal::entityTypeManager()->getStorage('user')->loadByProperties(['name' => $user_data['userPrincipalName']]);
    if(empty($users)) {
      $users = \Drupal::entityTypeManager()->getStorage('user')->loadByProperties(['mail' => $user_data['mail']]);
    }

    // If a user can't be found by Principal Name or Email but can be found via AD ID, it indicate the user's email or principal name have changed and we need to update email/principal name.
    $user_found_by_id = false;
    if(empty($users)) {
      $users = \Drupal::entityTypeManager()->getStorage('user')->loadByProperties(['field_active_directory_id' => $user_data['id']]);
      $user_found_by_id = !empty($users);
    }

    // Create a new user account if there is no existing account with the email
    if (empty($users)) {
      /*
        {
            "displayName": "Smith, Joe",
            "givenName": "Joe",
            "mail": "Joe.Smith@portlandoregon.gov",
            "surname": "Smith",
            "userPrincipalName": "Joe.Smith@portlandoregon.gov",
            "id": "9afb6f12-f5c2-4c30-b87c-5532ce6788f2",
            "manager@delta": [
                {
                    "@odata.type": "#microsoft.graph.user",
                    "id": "872995ed-515b-41fc-a318-93cf66f52f1f"
                }
            ]
        }
      */
      $user = User::create([
        'name' => PortlandOpenIdConnectUtil::TrimUserName( $user_data['userPrincipalName'] ),
        'mail' => $user_data['mail'],
        'pass' => user_password(), // Create a temp password
        'status' => 1,
        'field_active_directory_id' => $user_data['id'],
        'field_first_name' => $user_data['givenName'],
        'field_last_name' => $user_data['surname'],
        'field_principal_name' => $user_data['userPrincipalName'],
      ]);

      if(PortlandOpenIdConnectUtil::ShouldSkipUser($user)) continue;
      PortlandOpenIdConnectUtil::GetUserManager($access_token, $user);
      $has_profile = PortlandOpenIdConnectUtil::GetUserProfile($access_token, $user);
      // If the profile is empty, assume the user is not enabled
      if ($has_profile) {
        $user->save();
        $users_created []= $user->getAccountName();
      }
    }
    // Else the user is already in Drupal. We need to either update or disable the user.
    else {
      /** @var UserInterface $user */
      $user = array_values($users)[0]; // Assume the lookup returns only one unique user.
      if(PortlandOpenIdConnectUtil::ShouldSkipUser($user)) continue;

      // ONLY update the email address when the user was found by AD ID
      if($user_found_by_id) {
        $user->mail->value = $user_data['mail'];
      }

      $user->field_principal_name = $user_data['userPrincipalName'];
      $user->field_first_name = $user_data['givenName'];
      $user->field_last_name = $user_data['surname'];
      $user->field_active_directory_id = $user_data['id'];
      $user->setUsername(PortlandOpenIdConnectUtil::TrimUserName($user_data['userPrincipalName']) ); // Update account username

      PortlandOpenIdConnectUtil::GetUserManager($access_token, $user);
      $has_profile = PortlandOpenIdConnectUtil::GetUserProfile($access_token, $user);
      if ($has_profile) {
        $user->save();
        $users_updated []= $user->getAccountName();
      }

      // Check if the user account is enabled in AD
      $user_is_enabled_in_AD = PortlandOpenIdConnectUtil::IsUserEnabled($access_token, $user);
      // @removed is set when a user is removed from AD
      $user_is_disabled = array_key_exists('@removed', $user_data) || (! $user_is_enabled_in_AD);
      if ($user_is_disabled) {
        $user->status = 0;
        $user->save();
        $users_disabled []= $user->getAccountName();
      }
    }
  }

  // Summarize the changes made in this batch
  $log_message = 'Retrieved ' . count($user_data_array) . ' users. ';
  if (!empty($users_created)) {
    $log_message .= count($users_created) . " new users created: " . implode(", ", $users_created) . ". ";
  }
  if (!empty($users_updated)) {
    $log_message .= count($users_updated) . " users updated: " . implode(", ", $users_updated) . ". ";
  }
  if (!empty($users_disabled)) {
    $log_message .= count($users_disabled) . " users disabled: " . implode(", ", $users_disabled);
  }
  \Drupal::logger('portland OpenID')->notice($log_message);
}

/**
 * Call the user delta API to get users incrementally
 */
function _get_all_users($access_token, $domain = PortlandOpenIdConnectUtil::ROSE_DOMAIN_NAME)
{
  $system_state = \Drupal::state();

  /* @var \GuzzleHttp\ClientInterface $client */
  $client = new \GuzzleHttp\Client();
  // Perform the request.
  $options = [
    'method' => 'GET',
    'headers' => [
      'Content-Type' => 'application/json',
      'Authorization' => 'Bearer ' . $access_token,
    ],
  ];

  try {
    // Run this command to delete the resume link in order to start fresh
    // lando drush state:del user_sync.resume_url.DOMAIN

    if ($resume_url = $system_state->get("user_sync.resume_url.$domain")) {
      \Drupal::logger('portland OpenID')->notice("Resume user sync for $domain ...");
    } else {
      \Drupal::logger('portland OpenID')->notice("Start user sync for $domain ...");
    }

    // If there is a resume link, use it. Otherwise start fresh
    $request_url = (empty($resume_url)) ? 'https://graph.microsoft.com/v1.0/users/delta' : $resume_url;
    $request_limit = 1;
    $request_count = 0;
    $response_data = null;
    while (strlen($request_url) > 0 && $request_count < $request_limit) {
      $response = $client->get($request_url, $options);
      $response_data = json_decode((string) $response->getBody(), TRUE);
      if ((!isset($response_data['@odata.nextLink'])) && !($response_data['@odata.deltaLink'])) {
        \Drupal::logger('portland OpenID')->error("Users delta response contains neither nextLink nor deltaLink for $domain");
        return false;
      }
      _process_users($response_data, $access_token, $domain);
      $request_url = $response_data['@odata.nextLink'] ?? '';
      $request_count++;
    }
    if ($response_data == null) return false;

    // When there is no nextLink, there is no new user info.
    // Should use deltaLink to resume in the next Cron.
    $system_state->set("user_sync.resume_url.$domain", $response_data['@odata.nextLink'] ?? $response_data['@odata.deltaLink']);
    \Drupal::logger('portland OpenID')->notice(isset($response_data['@odata.nextLink']) ?
      "More users to be retrieved next time for $domain." :
      "Finished retrieving all users for $domain.");
    return true;
  } catch (RequestException $e) {
    $variables = [
      '@message' => 'Cannot retrieve users from ' . $domain,
      '@error_message' => $e->getMessage(),
    ];
    \Drupal::logger('portland OpenID')->notice('@message. Details: @error_message', $variables);
    return false;
  }
}
